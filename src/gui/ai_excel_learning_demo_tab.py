#!/usr/bin/env python3
"""
AI Excel Learning Demo Tab

Ez a modul egy dedik√°lt GUI tab-ot biztos√≠t a k√©sz tanp√©ld√°khoz √©s 
az AI Excel Learning dashboard integr√°ci√≥j√°hoz. A felhaszn√°l√≥k itt
megismerhetik a rendszer k√©pess√©geit √©s interakt√≠van tesztelhetik
a k√ºl√∂nb√∂z≈ë funkci√≥kat.
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import time
import os
import json
from datetime import datetime
from typing import Dict, List, Optional
import webbrowser
import subprocess
import sys

from src.utils.logger import app_logger

class AIExcelLearningDemoTab:
    """Dedik√°lt tab a k√©sz tanp√©ld√°khoz √©s AI Excel Learning dashboard-hoz"""
    
    def __init__(self, notebook, app):
        """Inicializ√°lja az AI Excel Learning Demo tab-ot"""
        self.notebook = notebook
        self.app = app
        self.frame = ttk.Frame(notebook)
        
        # Demo √°llapot
        self.demo_running = False
        self.current_demo = None
        self.demo_results = {}
        
        # AI Dashboard integr√°ci√≥
        self.dashboard_process = None
        self.dashboard_url = "http://localhost:8501"
        
        # Setup UI
        self.setup_ui()
        
        app_logger.info("AI Excel Learning Demo tab inicializ√°lva")
    
    def setup_ui(self):
        """Be√°ll√≠tja a felhaszn√°l√≥i fel√ºletet"""
        # F≈ë c√≠m
        title_frame = ttk.Frame(self.frame)
        title_frame.pack(fill='x', padx=10, pady=10)
        
        title_label = ttk.Label(
            title_frame, 
            text="ü§ñ AI Excel Learning - K√©sz Tanp√©ld√°k & Dashboard", 
            font=('Arial', 16, 'bold')
        )
        title_label.pack()
        
        subtitle_label = ttk.Label(
            title_frame,
            text="Ismerd meg a rendszer k√©pess√©geit √©s teszteld interakt√≠van",
            font=('Arial', 10)
        )
        subtitle_label.pack()
        
        # F≈ë kont√©ner
        main_container = ttk.Frame(self.frame)
        main_container.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Bal oldali panel - Tanp√©ld√°k
        left_panel = ttk.LabelFrame(main_container, text="üìö K√©sz Tanp√©ld√°k", padding=10)
        left_panel.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        self.setup_examples_panel(left_panel)
        
        # Jobb oldali panel - Dashboard & Integr√°ci√≥
        right_panel = ttk.LabelFrame(main_container, text="üìä AI Dashboard & Integr√°ci√≥", padding=10)
        right_panel.panel.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        self.setup_dashboard_panel(right_panel)
        
        # Als√≥ panel - Eredm√©nyek & Logok
        bottom_panel = ttk.LabelFrame(self.frame, text="üìã Eredm√©nyek & Logok", padding=10)
        bottom_panel.pack(fill='x', padx=10, pady=5)
        
        self.setup_results_panel(bottom_panel)
    
    def setup_examples_panel(self, parent):
        """Be√°ll√≠tja a tanp√©ld√°k panelt"""
        # Tanp√©lda kateg√≥ri√°k
        categories_frame = ttk.Frame(parent)
        categories_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(categories_frame, text="V√°lassz kateg√≥ri√°t:").pack(anchor='w')
        
        self.category_var = tk.StringVar(value="basic")
        category_combo = ttk.Combobox(
            categories_frame,
            textvariable=self.category_var,
            values=[
                ("basic", "Alapvet≈ë Excel elemz√©s"),
                ("charts", "Grafikonok tan√≠t√°sa"),
                ("formulas", "K√©pletek tan√≠t√°sa"),
                ("ml_models", "ML modellek"),
                ("pipeline", "Teljes tanul√°si folyamat"),
                ("advanced", "Halad√≥ funkci√≥k")
            ],
            state="readonly",
            width=30
        )
        category_combo.pack(anchor='w', pady=5)
        category_combo.bind('<<ComboboxSelected>>', self.on_category_changed)
        
        # Tanp√©lda le√≠r√°s
        desc_frame = ttk.Frame(parent)
        desc_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(desc_frame, text="Tanp√©lda le√≠r√°sa:").pack(anchor='w')
        
        self.description_text = scrolledtext.ScrolledText(
            desc_frame, 
            height=6, 
            wrap=tk.WORD,
            state='disabled'
        )
        self.description_text.pack(fill='x', pady=5)
        
        # Tanp√©lda futtat√°sa
        demo_frame = ttk.Frame(parent)
        demo_frame.pack(fill='x', pady=(0, 10))
        
        self.run_demo_btn = ttk.Button(
            demo_frame,
            text="‚ñ∂ Futtat√°s",
            command=self.run_selected_demo,
            style='Accent.TButton'
        )
        self.run_demo_btn.pack(side='left', padx=(0, 10))
        
        self.stop_demo_btn = ttk.Button(
            demo_frame,
            text="‚èπ Le√°ll√≠t√°s",
            command=self.stop_demo,
            state='disabled'
        )
        self.stop_demo_btn.pack(side='left')
        
        # Folyamat √°llapot
        progress_frame = ttk.Frame(parent)
        progress_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(progress_frame, text="Folyamat √°llapota:").pack(anchor='w')
        
        self.progress_bar = ttk.Progressbar(
            progress_frame,
            mode='indeterminate'
        )
        self.progress_bar.pack(fill='x', pady=5)
        
        self.status_label = ttk.Label(
            progress_frame,
            text="K√©sz a futtat√°sra",
            font=('Arial', 9)
        )
        self.status_label.pack(anchor='w')
        
        # Kezdeti le√≠r√°s bet√∂lt√©se
        self.update_description()
    
    def setup_dashboard_panel(self, parent):
        """Be√°ll√≠tja a dashboard panelt"""
        # Dashboard ind√≠t√°sa
        dashboard_start_frame = ttk.Frame(parent)
        dashboard_start_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(
            dashboard_start_frame, 
            text="AI Monitoring Dashboard ind√≠t√°sa:"
        ).pack(anchor='w')
        
        self.start_dashboard_btn = ttk.Button(
            dashboard_start_frame,
            text="üöÄ Ind√≠t√°s",
            command=self.start_dashboard,
            style='Accent.TButton'
        )
        self.start_dashboard_btn.pack(side='left', padx=(0, 10))
        
        self.stop_dashboard_btn = ttk.Button(
            dashboard_start_frame,
            text="‚èπ Le√°ll√≠t√°s",
            command=self.stop_dashboard,
            state='disabled'
            )
        self.stop_dashboard_btn.pack(side='left')
        
        # Dashboard √°llapot
        dashboard_status_frame = ttk.Frame(parent)
        dashboard_status_frame.pack(fill='x', pady=(0, 10))
        
        self.dashboard_status_label = ttk.Label(
            dashboard_status_frame,
            text="Dashboard nincs elind√≠tva",
            font=('Arial', 9)
        )
        self.dashboard_status_label.pack(anchor='w')
        
        # Dashboard megnyit√°sa
        open_frame = ttk.Frame(parent)
        open_frame.pack(fill='x', pady=(0, 10))
        
        self.open_dashboard_btn = ttk.Button(
            open_frame,
            text="üåê Megnyit√°s b√∂ng√©sz≈ëben",
            command=self.open_dashboard_in_browser,
            state='disabled'
        )
        self.open_dashboard_btn.pack(side='left')
        
        # Integr√°ci√≥s opci√≥k
        integration_frame = ttk.LabelFrame(parent, text="üîó Integr√°ci√≥s Opci√≥k", padding=5)
        integration_frame.pack(fill='x', pady=(0, 10))
        
        self.auto_refresh_var = tk.BooleanVar(value=True)
        auto_refresh_check = ttk.Checkbutton(
            integration_frame,
            text="Automatikus friss√≠t√©s",
            variable=self.auto_refresh_var
        )
        auto_refresh_check.pack(anchor='w')
        
        self.real_time_var = tk.BooleanVar(value=True)
        real_time_check = ttk.Checkbutton(
            integration_frame,
            text="Val√≥s idej≈± monitoring",
            variable=self.real_time_var
        )
        real_time_check.pack(anchor='w')
        
        # Export opci√≥k
        export_frame = ttk.LabelFrame(parent, text="üì§ Export Opci√≥k", padding=5)
        export_frame.pack(fill='x')
        
        export_btn = ttk.Button(
            export_frame,
            text="üìä Eredm√©nyek export√°l√°sa",
            command=self.export_results
        )
        export_btn.pack(side='left', padx=(0, 10))
        
        report_btn = ttk.Button(
            export_frame,
            text="üìã Jelent√©s gener√°l√°sa",
            command=self.generate_report
        )
        report_btn.pack(side='left')
    
    def setup_results_panel(self, parent):
        """Be√°ll√≠tja az eredm√©nyek panelt"""
        # Eredm√©nyek megjelen√≠t√©se
        results_frame = ttk.Frame(parent)
        results_frame.pack(fill='both', expand=True)
        
        # Eredm√©nyek list√°ja
        list_frame = ttk.Frame(results_frame)
        list_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        ttk.Label(list_frame, text="Futtatott tanp√©ld√°k:").pack(anchor='w')
        
        self.results_tree = ttk.Treeview(
            list_frame,
            columns=('D√°tum', 'Kateg√≥ria', '√Ållapot', 'Id≈ëtartam'),
            show='headings',
            height=6
        )
        
        self.results_tree.heading('D√°tum', text='D√°tum')
        self.results_tree.heading('Kateg√≥ria', text='Kateg√≥ria')
        self.results_tree.heading('√Ållapot', text='√Ållapot')
        self.results_tree.heading('Id≈ëtartam', text='Id≈ëtartam')
        
        self.results_tree.column('D√°tum', width=120)
        self.results_tree.column('Kateg√≥ria', width=150)
        self.results_tree.column('√Ållapot', width=100)
        self.results_tree.column('Id≈ëtartam', width=100)
        
        self.results_tree.pack(fill='both', expand=True)
        
        # R√©szletek
        details_frame = ttk.Frame(results_frame)
        details_frame.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        ttk.Label(details_frame, text="R√©szletek:").pack(anchor='w')
        
        self.details_text = scrolledtext.ScrolledText(
            details_frame,
            height=6,
            wrap=tk.WORD,
            state='disabled'
        )
        self.details_text.pack(fill='both', expand=True)
        
        # Eredm√©nyek bet√∂lt√©se
        self.load_results()
    
    def on_category_changed(self, event=None):
        """Kateg√≥ria v√°ltoz√°sakor friss√≠ti a le√≠r√°st"""
        self.update_description()
    
    def update_description(self):
        """Friss√≠ti a kiv√°lasztott kateg√≥ria le√≠r√°s√°t"""
        category = self.category_var.get()
        descriptions = {
            "basic": """Alapvet≈ë Excel elemz√©s:
‚Ä¢ Excel f√°jlok strukt√∫r√°j√°nak felismer√©se
‚Ä¢ Adatok t√≠pus√°nak √©s form√°tum√°nak elemz√©se
‚Ä¢ Oszlopok √©s sorok kapcsolatainak felder√≠t√©se
‚Ä¢ Egyszer≈± statisztik√°k gener√°l√°sa""",
            
            "charts": """Grafikonok tan√≠t√°sa:
‚Ä¢ Excel grafikonok t√≠pus√°nak felismer√©se
‚Ä¢ Adatok √©s grafikonok k√∂z√∂tti kapcsolatok
‚Ä¢ Grafikon st√≠lusok √©s form√°z√°sok tan√≠t√°sa
‚Ä¢ √öj grafikonok gener√°l√°sa a tanult mint√°k alapj√°n""",
            
            "formulas": """K√©pletek tan√≠t√°sa:
‚Ä¢ Excel k√©pletek mint√°zatainak felismer√©se
‚Ä¢ Matematikai √©s logikai kapcsolatok tan√≠t√°sa
‚Ä¢ K√©plet f√ºgg≈ës√©gek √©s referenci√°k elemz√©se
‚Ä¢ √öj k√©pletek gener√°l√°sa a tanult mint√°k alapj√°n""",
            
            "ml_models": """ML modellek:
‚Ä¢ G√©pi tanul√°si modellek Excel adatokra
‚Ä¢ Predikt√≠v elemz√©s √©s trend felismer√©s
‚Ä¢ Anom√°lia detekt√°l√°s
‚Ä¢ Modellek teljes√≠tm√©ny√©nek monitoroz√°sa""",
            
            "pipeline": """Teljes tanul√°si folyamat:
‚Ä¢ End-to-end Excel tanul√°si folyamat
‚Ä¢ Automatikus adatfeldolgoz√°s √©s elemz√©s
‚Ä¢ Folyamatos tanul√°s √©s fejleszt√©s
‚Ä¢ Teljes√≠tm√©ny optimaliz√°l√°s""",
            
            "advanced": """Halad√≥ funkci√≥k:
‚Ä¢ Komplex Excel munkaf√ºzetek elemz√©se
‚Ä¢ T√∂bb munkalap k√∂z√∂tti kapcsolatok
‚Ä¢ Makr√≥k √©s VBA k√≥d elemz√©se
‚Ä¢ Automatikus dokument√°ci√≥ gener√°l√°s"""
        }
        
        description = descriptions.get(category, "Kateg√≥ria le√≠r√°sa nem el√©rhet≈ë")
        
        self.description_text.config(state='normal')
        self.description_text.delete(1.0, tk.END)
        self.description_text.insert(1.0, description)
        self.description_text.config(state='disabled')
    
    def run_selected_demo(self):
        """Futtatja a kiv√°lasztott tanp√©ld√°t"""
        if self.demo_running:
            messagebox.showwarning("Figyelmeztet√©s", "M√°r fut egy tanp√©lda!")
            return
        
        category = self.category_var.get()
        if not category:
            messagebox.showerror("Hiba", "V√°lassz ki egy kateg√≥ri√°t!")
            return
        
        # UI friss√≠t√©se
        self.demo_running = True
        self.run_demo_btn.config(state='disabled')
        self.stop_demo_btn.config(state='normal')
        self.progress_bar.start()
        self.status_label.config(text="Tanp√©lda futtat√°sa...")
        
        # Demo futtat√°sa k√ºl√∂n sz√°lban
        self.demo_thread = threading.Thread(
            target=self._run_demo_worker,
            args=(category,)
        )
        self.demo_thread.daemon = True
        self.demo_thread.start()
    
    def _run_demo_worker(self, category):
        """Worker sz√°l a demo futtat√°s√°hoz"""
        try:
            start_time = time.time()
            
            # Demo futtat√°sa a kiv√°lasztott kateg√≥ri√°hoz
            if category == "basic":
                result = self._run_basic_demo()
            elif category == "charts":
                result = self._run_charts_demo()
            elif category == "formulas":
                result = self._run_formulas_demo()
            elif category == "ml_models":
                result = self._run_ml_models_demo()
            elif category == "pipeline":
                result = self._run_pipeline_demo()
            elif category == "advanced":
                result = self._run_advanced_demo()
            else:
                result = {"success": False, "error": "Ismeretlen kateg√≥ria"}
            
            end_time = time.time()
            duration = end_time - start_time
            
            # Eredm√©ny ment√©se
            result_data = {
                "category": category,
                "timestamp": datetime.now().isoformat(),
                "duration": f"{duration:.2f}s",
                "success": result.get("success", False),
                "details": result
            }
            
            self.demo_results[category] = result_data
            
            # UI friss√≠t√©se f≈ë sz√°lban
            self.frame.after(0, self._demo_completed, result_data)
            
        except Exception as e:
            error_result = {
                "category": category,
                "timestamp": datetime.now().isoformat(),
                "duration": "0s",
                "success": False,
                "details": {"error": str(e)}
            }
            self.frame.after(0, self._demo_completed, error_result)
    
    def _run_basic_demo(self):
        """Alapvet≈ë Excel elemz√©s demo"""
        try:
            # Itt h√≠vn√°nk meg a val√≥s AI Excel Learning funkci√≥kat
            # P√©lda implement√°ci√≥
            time.sleep(2)  # Szimul√°lt feldolgoz√°s
            
            return {
                "success": True,
                "message": "Alapvet≈ë Excel elemz√©s sikeresen lefutott",
                "files_analyzed": 3,
                "patterns_found": 5,
                "processing_time": "2.1s"
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _run_charts_demo(self):
        """Grafikonok tan√≠t√°sa demo"""
        try:
            time.sleep(3)  # Szimul√°lt feldolgoz√°s
            
            return {
                "success": True,
                "message": "Grafikon tan√≠t√°s sikeresen lefutott",
                "charts_analyzed": 8,
                "chart_types_learned": ["scatter", "line", "bar", "pie"],
                "processing_time": "3.2s"
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _run_formulas_demo(self):
        """K√©pletek tan√≠t√°sa demo"""
        try:
            time.sleep(2.5)  # Szimul√°lt feldolgoz√°s
            
            return {
                "success": True,
                "message": "K√©plet tan√≠t√°s sikeresen lefutott",
                "formulas_analyzed": 12,
                "patterns_learned": ["mathematical", "logical", "lookup"],
                "processing_time": "2.5s"
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _run_ml_models_demo(self):
        """ML modellek demo"""
        try:
            time.sleep(4)  # Szimul√°lt feldolgoz√°s
            
            return {
                "success": True,
                "message": "ML modellek sikeresen tanultak",
                "models_trained": 2,
                "accuracy": "94.2%",
                "processing_time": "4.1s"
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _run_pipeline_demo(self):
        """Teljes tanul√°si folyamat demo"""
        try:
            time.sleep(5)  # Szimul√°lt feldolgoz√°s
            
            return {
                "success": True,
                "message": "Teljes tanul√°si folyamat sikeresen lefutott",
                "total_files": 15,
                "total_patterns": 28,
                "processing_time": "5.3s"
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _run_advanced_demo(self):
        """Halad√≥ funkci√≥k demo"""
        try:
            time.sleep(3.5)  # Szimul√°lt feldolgoz√°s
            
            return {
                "success": True,
                "message": "Halad√≥ funkci√≥k sikeresen lefutottak",
                "complex_workbooks": 4,
                "vba_analysis": True,
                "processing_time": "3.5s"
            }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def _demo_completed(self, result_data):
        """Demo befejez√©se ut√°n friss√≠ti a UI-t"""
        self.demo_running = False
        self.run_demo_btn.config(state='normal')
        self.stop_demo_btn.config(state='disabled')
        self.progress_bar.stop()
        
        if result_data["success"]:
            self.status_label.config(text="Tanp√©lda sikeresen lefutott")
            messagebox.showinfo("Siker", f"Tanp√©lda sikeresen lefutott!\nId≈ëtartam: {result_data['duration']}")
        else:
            self.status_label.config(text="Tanp√©lda hib√°val lefutott")
            messagebox.showerror("Hiba", f"Tanp√©lda hib√°val lefutott:\n{result_data['details'].get('error', 'Ismeretlen hiba')}")
        
        # Eredm√©nyek friss√≠t√©se
        self.load_results()
    
    def stop_demo(self):
        """Le√°ll√≠tja a fut√≥ tanp√©ld√°t"""
        if self.demo_running:
            self.demo_running = False
            self.status_label.config(text="Tanp√©lda le√°ll√≠tva")
            self.progress_bar.stop()
            self.run_demo_btn.config(state='normal')
            self.stop_demo_btn.config(state='disabled')
    
    def start_dashboard(self):
        """Ind√≠tja az AI Dashboard-ot"""
        try:
            # Streamlit dashboard ind√≠t√°sa
            dashboard_script = os.path.join(
                os.path.dirname(__file__), 
                "..", "ai_excel_learning", "ai_dashboard.py"
            )
            
            if not os.path.exists(dashboard_script):
                messagebox.showerror("Hiba", "Dashboard script nem tal√°lhat√≥!")
                return
            
            # Dashboard ind√≠t√°sa k√ºl√∂n folyamatban
            self.dashboard_process = subprocess.Popen([
                sys.executable, "-m", "streamlit", "run", dashboard_script,
                "--server.port", "8501",
                "--server.headless", "true"
            ])
            
            # V√°rakoz√°s a dashboard elindul√°s√°ra
            time.sleep(3)
            
            # UI friss√≠t√©se
            self.start_dashboard_btn.config(state='disabled')
            self.stop_dashboard_btn.config(state='normal')
            self.open_dashboard_btn.config(state='normal')
            self.dashboard_status_label.config(
                text="Dashboard fut (http://localhost:8501)",
                foreground="green"
            )
            
            messagebox.showinfo("Siker", "AI Dashboard sikeresen elindult!")
            
        except Exception as e:
            messagebox.showerror("Hiba", f"Dashboard ind√≠t√°sa sikertelen:\n{str(e)}")
    
    def stop_dashboard(self):
        """Le√°ll√≠tja az AI Dashboard-ot"""
        if self.dashboard_process:
            try:
                self.dashboard_process.terminate()
                self.dashboard_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.dashboard_process.kill()
            
            self.dashboard_process = None
            
            # UI friss√≠t√©se
            self.start_dashboard_btn.config(state='normal')
            self.stop_dashboard_btn.config(state='disabled')
            self.open_dashboard_btn.config(state='disabled')
            self.dashboard_status_label.config(
                text="Dashboard nincs elind√≠tva",
                foreground="black"
            )
    
    def open_dashboard_in_browser(self):
        """Megnyitja a dashboard-ot a b√∂ng√©sz≈ëben"""
        try:
            webbrowser.open(self.dashboard_url)
        except Exception as e:
            messagebox.showerror("Hiba", f"B√∂ng√©sz≈ë megnyit√°sa sikertelen:\n{str(e)}")
    
    def export_results(self):
        """Export√°lja az eredm√©nyeket"""
        if not self.demo_results:
            messagebox.showinfo("Inform√°ci√≥", "Nincsenek export√°lhat√≥ eredm√©nyek!")
            return
        
        try:
            filename = f"ai_excel_learning_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            filepath = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
                initialname=filename
            )
            
            if filepath:
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(self.demo_results, f, indent=2, ensure_ascii=False)
                
                messagebox.showinfo("Siker", f"Eredm√©nyek export√°lva: {filepath}")
        
        except Exception as e:
            messagebox.showerror("Hiba", f"Export√°l√°s sikertelen:\n{str(e)}")
    
    def generate_report(self):
        """Gener√°l egy √∂sszefoglal√≥ jelent√©st"""
        if not self.demo_results:
            messagebox.showinfo("Inform√°ci√≥", "Nincs adat a jelent√©s gener√°l√°s√°hoz!")
            return
        
        try:
            # Egyszer≈± jelent√©s gener√°l√°sa
            report = self._create_report()
            
            filename = f"ai_excel_learning_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            filepath = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
                initialname=filename
            )
            
            if filepath:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(report)
                
                messagebox.showinfo("Siker", f"Jelent√©s gener√°lva: {filepath}")
        
        except Exception as e:
            messagebox.showerror("Hiba", f"Jelent√©s gener√°l√°sa sikertelen:\n{str(e)}")
    
    def _create_report(self):
        """L√©trehozza az √∂sszefoglal√≥ jelent√©st"""
        report_lines = []
        report_lines.append("=" * 60)
        report_lines.append("AI EXCEL LEARNING - √ñSSZEFOGLAL√ì JELENT√âS")
        report_lines.append("=" * 60)
        report_lines.append(f"Gener√°lva: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report_lines.append("")
        
        # √ñsszes√≠t√©s
        total_demos = len(self.demo_results)
        successful_demos = sum(1 for r in self.demo_results.values() if r["success"])
        failed_demos = total_demos - successful_demos
        
        report_lines.append("√ñSSZES√çT√âS:")
        report_lines.append(f"  - √ñsszes tanp√©lda: {total_demos}")
        report_lines.append(f"  - Sikeres: {successful_demos}")
        report_lines.append(f"  - Sikertelen: {failed_demos}")
        report_lines.append(f"  - Sikeress√©gi ar√°ny: {(successful_demos/total_demos*100):.1f}%")
        report_lines.append("")
        
        # R√©szletes eredm√©nyek
        report_lines.append("R√âSZLETES EREDM√âNYEK:")
        report_lines.append("-" * 40)
        
        for category, result in self.demo_results.items():
            report_lines.append(f"Kateg√≥ria: {category}")
            report_lines.append(f"  D√°tum: {result['timestamp']}")
            report_lines.append(f"  Id≈ëtartam: {result['duration']}")
            report_lines.append(f"  √Ållapot: {'Sikeres' if result['success'] else 'Sikertelen'}")
            
            if result['success'] and 'details' in result:
                details = result['details']
                if 'message' in details:
                    report_lines.append(f"  √úzenet: {details['message']}")
                if 'files_analyzed' in details:
                    report_lines.append(f"  Elemzett f√°jlok: {details['files_analyzed']}")
                if 'patterns_found' in details:
                    report_lines.append(f"  Tal√°lt mint√°zatok: {details['patterns_found']}")
            
            report_lines.append("")
        
        report_lines.append("=" * 60)
        
        return "\n".join(report_lines)
    
    def load_results(self):
        """Bet√∂lti a mentett eredm√©nyeket"""
        # Eredm√©nyek t√∂rl√©se
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # Eredm√©nyek hozz√°ad√°sa
        for category, result in self.demo_results.items():
            status = "‚úÖ Sikeres" if result["success"] else "‚ùå Sikertelen"
            self.results_tree.insert("", "end", values=(
                result["timestamp"][:19].replace("T", " "),
                category,
                status,
                result["duration"]
            ))
        
        # Eredm√©nyek kiv√°laszt√°s√°nak kezel√©se
        self.results_tree.bind('<<TreeviewSelect>>', self.on_result_selected)
    
    def on_result_selected(self, event=None):
        """Eredm√©ny kiv√°laszt√°sakor friss√≠ti a r√©szleteket"""
        selection = self.results_tree.selection()
        if not selection:
            return
        
        item = self.results_tree.item(selection[0])
        category = item['values'][1]
        
        if category in self.demo_results:
            result = self.demo_results[category]
            details = self._format_result_details(result)
            
            self.details_text.config(state='normal')
            self.details_text.delete(1.0, tk.END)
            self.details_text.insert(1.0, details)
            self.details_text.config(state='disabled')
    
    def _format_result_details(self, result):
        """Form√°zza az eredm√©ny r√©szleteit"""
        lines = []
        lines.append(f"Kateg√≥ria: {result['category']}")
        lines.append(f"D√°tum: {result['timestamp']}")
        lines.append(f"Id≈ëtartam: {result['duration']}")
        lines.append(f"√Ållapot: {'Sikeres' if result['success'] else 'Sikertelen'}")
        lines.append("")
        
        if 'details' in result:
            details = result['details']
            if result['success']:
                lines.append("R√©szletek:")
                for key, value in details.items():
                    if key != 'success':
                        lines.append(f"  {key}: {value}")
            else:
                lines.append(f"Hiba: {details.get('error', 'Ismeretlen hiba')}")
        
        return "\n".join(lines)
    
    def cleanup(self):
        """Tiszt√≠tja fel az er≈ëforr√°sokat"""
        if self.dashboard_process:
            self.stop_dashboard()
        
        if hasattr(self, 'demo_thread') and self.demo_thread.is_alive():
            self.demo_running = False
            self.demo_thread.join(timeout=1) 