#!/usr/bin/env python3
"""
K√©sz Tanp√©ld√°k √©s AI Dashboard Men√º Tab

Ez a modul egy dedik√°lt men√ºpontot biztos√≠t a k√©sz tanp√©ld√°khoz √©s 
az AI Dashboard integr√°ci√≥j√°hoz. A rendszer hossz√∫ t√°von gondolkodva
lett kialak√≠tva, hogy mind desktop, mind webapp verzi√≥ban optim√°lisan
m≈±k√∂dj√∂n.

Funkci√≥k:
- üìö Interakt√≠v k√©sz tanp√©ld√°k kateg√≥ri√°kba rendezve
- üìä AI Dashboard integr√°ci√≥ k√ºl√∂n oldalk√©nt
- üîß Fejlett monitoring √©s riportol√°s
- üìã Eredm√©nyek export√°l√°sa √©s megoszt√°sa
- ‚öôÔ∏è Testreszabhat√≥ be√°ll√≠t√°sok
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import time
import os
import json
import webbrowser
import subprocess
import sys
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path

from src.utils.logger import app_logger

class ExamplesMenuTab:
    """Dedik√°lt tab a k√©sz tanp√©ld√°khoz √©s AI Dashboard-hoz"""
    
    def __init__(self, notebook, app):
        """Inicializ√°lja a K√©sz Tanp√©ld√°k men√º tab-ot"""
        self.notebook = notebook
        self.app = app
        self.frame = ttk.Frame(notebook)
        
        # √Ållapot v√°ltoz√≥k
        self.demo_running = False
        self.current_demo = None
        self.demo_results = {}
        self.ai_modules_available = self._check_ai_modules()
        
        # Dashboard integr√°ci√≥
        self.dashboard_process = None
        self.dashboard_url = "http://localhost:8501"
        self.webapp_process = None
        self.webapp_url = "http://localhost:8502"
        
        # Be√°ll√≠t√°sok
        self.settings = {
            "auto_refresh": True,
            "real_time_monitoring": True,
            "detailed_logging": False,
            "export_format": "json"
        }
        
        # UI fel√©p√≠t√©se
        self.setup_ui()
        self.load_settings()
        
        app_logger.info("K√©sz Tanp√©ld√°k men√º tab inicializ√°lva")
    
    def _check_ai_modules(self):
        """Ellen≈ërzi az AI modulok el√©rhet≈ës√©g√©t"""
        try:
            from src.ai_excel_learning import excel_analyzer, chart_learner, formula_learner
            return True
        except ImportError:
            return False
    
    def setup_ui(self):
        """Be√°ll√≠tja a teljes felhaszn√°l√≥i fel√ºletet"""
        # F≈ë c√≠m √©s navig√°ci√≥s s√°v
        self.setup_header()
        
        # F≈ë tartalom ter√ºlete notebook-kal
        self.setup_main_content()
        
        # Als√≥ st√°tusz s√°v
        self.setup_status_bar()
    
    def setup_header(self):
        """Be√°ll√≠tja a fejl√©c r√©szt"""
        header_frame = ttk.Frame(self.frame, relief=tk.RAISED, borderwidth=1)
        header_frame.pack(fill='x', padx=5, pady=5)
        
        # F≈ëc√≠m
        title_frame = ttk.Frame(header_frame)
        title_frame.pack(fill='x', padx=10, pady=10)
        
        title_label = ttk.Label(
            title_frame,
            text="üéØ AI Excel Learning - K√©sz Tanp√©ld√°k & Dashboard",
            font=('Arial', 16, 'bold')
        )
        title_label.pack(side='left')
        
        # Gyors akci√≥ gombok
        actions_frame = ttk.Frame(title_frame)
        actions_frame.pack(side='right')
        
        ttk.Button(
            actions_frame,
            text="üöÄ Webapp Ind√≠t√°sa",
            command=self.launch_webapp,
            style='Accent.TButton'
        ).pack(side='left', padx=5)
        
        ttk.Button(
            actions_frame,
            text="üìä Dashboard",
            command=self.toggle_dashboard
        ).pack(side='left', padx=5)
        
        ttk.Button(
            actions_frame,
            text="‚öôÔ∏è Be√°ll√≠t√°sok",
            command=self.show_settings
        ).pack(side='left', padx=5)
        
        # Navig√°ci√≥s s√°v
        nav_frame = ttk.Frame(header_frame)
        nav_frame.pack(fill='x', padx=10, pady=(0, 10))
        
        # Tab-szer≈± navig√°ci√≥
        self.nav_var = tk.StringVar(value="examples")
        nav_buttons = [
            ("examples", "üìö Tanp√©ld√°k", self.show_examples_view),
            ("dashboard", "üìä Dashboard", self.show_dashboard_view),
            ("testing", "üîß Tesztel√©s", self.show_testing_view),
            ("results", "üìã Eredm√©nyek", self.show_results_view)
        ]
        
        for nav_id, nav_text, nav_command in nav_buttons:
            btn = ttk.Radiobutton(
                nav_frame,
                text=nav_text,
                variable=self.nav_var,
                value=nav_id,
                command=nav_command
            )
            btn.pack(side='left', padx=5)
    
    def setup_main_content(self):
        """Be√°ll√≠tja a f≈ë tartalom ter√ºletet"""
        # F≈ë tartalom kont√©ner
        self.content_frame = ttk.Frame(self.frame)
        self.content_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # N√©zetek be√°ll√≠t√°sa
        self.setup_examples_view()
        self.setup_dashboard_view() 
        self.setup_testing_view()
        self.setup_results_view()
        
        # Kezdeti n√©zet
        self.show_examples_view()
    
    def setup_examples_view(self):
        """Be√°ll√≠tja a tanp√©ld√°k n√©zetet"""
        self.examples_frame = ttk.Frame(self.content_frame)
        
        # Bal oldali panel - Kateg√≥ri√°k √©s le√≠r√°sok
        left_panel = ttk.LabelFrame(self.examples_frame, text="üìö Tanp√©ld√°k", padding=10)
        left_panel.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        # Kateg√≥ria v√°laszt√≥
        category_frame = ttk.Frame(left_panel)
        category_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(category_frame, text="V√°lassz kateg√≥ri√°t:", font=('Arial', 10, 'bold')).pack(anchor='w')
        
        self.category_var = tk.StringVar(value="basic")
        self.category_combo = ttk.Combobox(
            category_frame,
            textvariable=self.category_var,
            values=list(self.get_example_categories().keys()),
            state="readonly",
            width=40
        )
        self.category_combo.pack(anchor='w', pady=5, fill='x')
        self.category_combo.bind('<<ComboboxSelected>>', self.on_category_changed)
        
        # Tanp√©lda le√≠r√°s
        desc_frame = ttk.Frame(left_panel)
        desc_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        ttk.Label(desc_frame, text="Tanp√©lda r√©szletei:", font=('Arial', 10, 'bold')).pack(anchor='w')
        
        self.description_text = scrolledtext.ScrolledText(
            desc_frame,
            height=12,
            wrap=tk.WORD,
            state='disabled',
            font=('Consolas', 9)
        )
        self.description_text.pack(fill='both', expand=True, pady=5)
        
        # Tanp√©lda vez√©rl≈ëk
        controls_frame = ttk.Frame(left_panel)
        controls_frame.pack(fill='x', pady=(0, 10))
        
        # Futtat√°s gombok
        run_frame = ttk.Frame(controls_frame)
        run_frame.pack(fill='x', pady=(0, 5))
        
        self.run_demo_btn = ttk.Button(
            run_frame,
            text="‚ñ∂ Futtat√°s",
            command=self.run_selected_demo,
            style='Accent.TButton'
        )
        self.run_demo_btn.pack(side='left', padx=(0, 10))
        
        self.stop_demo_btn = ttk.Button(
            run_frame,
            text="‚èπ Le√°ll√≠t√°s",
            command=self.stop_demo,
            state='disabled'
        )
        self.stop_demo_btn.pack(side='left', padx=(0, 10))
        
        ttk.Button(
            run_frame,
            text="üìã R√©szletek",
            command=self.show_demo_details
        ).pack(side='left')
        
        # Jobb oldali panel - Folyamat monitoring
        right_panel = ttk.LabelFrame(self.examples_frame, text="üìä Monitoring & √Ållapot", padding=10)
        right_panel.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        # Rendszer √°llapot
        status_frame = ttk.Frame(right_panel)
        status_frame.pack(fill='x', pady=(0, 15))
        
        ttk.Label(status_frame, text="Rendszer √°llapot:", font=('Arial', 10, 'bold')).pack(anchor='w')
        
        self.status_tree = ttk.Treeview(
            status_frame,
            columns=('√Ållapot',),
            show='tree headings',
            height=6
        )
        self.status_tree.heading('#0', text='Modul')
        self.status_tree.heading('√Ållapot', text='√Ållapot')
        self.status_tree.column('#0', width=120)
        self.status_tree.column('√Ållapot', width=100)
        self.status_tree.pack(fill='x', pady=5)
        
        # Folyamat √°llapot
        progress_frame = ttk.Frame(right_panel)
        progress_frame.pack(fill='x', pady=(0, 15))
        
        ttk.Label(progress_frame, text="Aktu√°lis folyamat:", font=('Arial', 10, 'bold')).pack(anchor='w')
        
        self.progress_bar = ttk.Progressbar(
            progress_frame,
            mode='indeterminate'
        )
        self.progress_bar.pack(fill='x', pady=5)
        
        self.status_label = ttk.Label(
            progress_frame,
            text="K√©sz a futtat√°sra",
            font=('Arial', 9)
        )
        self.status_label.pack(anchor='w')
        
        # Teljes√≠tm√©ny metrik√°k
        metrics_frame = ttk.LabelFrame(right_panel, text="üìà Teljes√≠tm√©ny Metrik√°k", padding=5)
        metrics_frame.pack(fill='x', pady=(0, 15))
        
        self.metrics_labels = {}
        metrics = [
            ("Futtat√°sok", "0"),
            ("Sikeress√©g", "0%"),
            ("√Åtlagos id≈ë", "0s"),
            ("Hib√°k", "0")
        ]
        
        for i, (metric, value) in enumerate(metrics):
            row = i // 2
            col = i % 2
            
            metric_frame = ttk.Frame(metrics_frame)
            metric_frame.grid(row=row, column=col, sticky='ew', padx=5, pady=2)
            metrics_frame.columnconfigure(col, weight=1)
            
            ttk.Label(metric_frame, text=f"{metric}:", font=('Arial', 8)).pack(side='left')
            label = ttk.Label(metric_frame, text=value, font=('Arial', 8, 'bold'))
            label.pack(side='right')
            self.metrics_labels[metric] = label
        
        # Gyors akci√≥k
        actions_frame = ttk.LabelFrame(right_panel, text="‚ö° Gyors Akci√≥k", padding=5)
        actions_frame.pack(fill='x')
        
        ttk.Button(
            actions_frame,
            text="üì§ Export eredm√©nyek",
            command=self.export_results
        ).pack(fill='x', pady=2)
        
        ttk.Button(
            actions_frame,
            text="üîÑ Friss√≠t√©s",
            command=self.refresh_status
        ).pack(fill='x', pady=2)
        
        ttk.Button(
            actions_frame,
            text="üßπ Tiszt√≠t√°s",
            command=self.clear_results
        ).pack(fill='x', pady=2)
        
        # Kezdeti le√≠r√°s √©s √°llapot bet√∂lt√©se
        self.update_description()
        self.refresh_status()
    
    def setup_dashboard_view(self):
        """Be√°ll√≠tja a dashboard n√©zetet"""
        self.dashboard_frame = ttk.Frame(self.content_frame)
        
        # Dashboard vez√©rl≈ëpult
        control_panel = ttk.LabelFrame(self.dashboard_frame, text="üéõÔ∏è Dashboard Vez√©rl≈ëpult", padding=10)
        control_panel.pack(fill='x', padx=10, pady=10)
        
        # Dashboard szolg√°ltat√°sok
        services_frame = ttk.Frame(control_panel)
        services_frame.pack(fill='x')
        
        # AI Dashboard
        ai_dash_frame = ttk.LabelFrame(services_frame, text="üìä AI Monitoring Dashboard", padding=5)
        ai_dash_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        self.dashboard_status_label = ttk.Label(
            ai_dash_frame,
            text="‚ùå Nincs elind√≠tva",
            font=('Arial', 9)
        )
        self.dashboard_status_label.pack()
        
        dash_buttons_frame = ttk.Frame(ai_dash_frame)
        dash_buttons_frame.pack(fill='x', pady=5)
        
        self.start_dashboard_btn = ttk.Button(
            dash_buttons_frame,
            text="üöÄ Ind√≠t√°s",
            command=self.start_dashboard
        )
        self.start_dashboard_btn.pack(side='left', padx=(0, 5))
        
        self.open_dashboard_btn = ttk.Button(
            dash_buttons_frame,
            text="üåê Megnyit√°s",
            command=self.open_dashboard,
            state='disabled'
        )
        self.open_dashboard_btn.pack(side='left')
        
        # WebApp Dashboard
        webapp_frame = ttk.LabelFrame(services_frame, text="üåê WebApp Dashboard", padding=5)
        webapp_frame.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        self.webapp_status_label = ttk.Label(
            webapp_frame,
            text="‚ùå Nincs elind√≠tva",
            font=('Arial', 9)
        )
        self.webapp_status_label.pack()
        
        webapp_buttons_frame = ttk.Frame(webapp_frame)
        webapp_buttons_frame.pack(fill='x', pady=5)
        
        self.start_webapp_btn = ttk.Button(
            webapp_buttons_frame,
            text="üöÄ Ind√≠t√°s",
            command=self.start_webapp
        )
        self.start_webapp_btn.pack(side='left', padx=(0, 5))
        
        self.open_webapp_btn = ttk.Button(
            webapp_buttons_frame,
            text="üåê Megnyit√°s",
            command=self.open_webapp,
            state='disabled'
        )
        self.open_webapp_btn.pack(side='left')
        
        # Dashboard integr√°ci√≥ opci√≥k
        integration_frame = ttk.LabelFrame(self.dashboard_frame, text="üîó Integr√°ci√≥ & Be√°ll√≠t√°sok", padding=10)
        integration_frame.pack(fill='x', padx=10, pady=10)
        
        options_frame = ttk.Frame(integration_frame)
        options_frame.pack(fill='x')
        
        # Bal oldali opci√≥k
        left_options = ttk.Frame(options_frame)
        left_options.pack(side='left', fill='both', expand=True)
        
        self.auto_refresh_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            left_options,
            text="üîÑ Automatikus friss√≠t√©s",
            variable=self.auto_refresh_var,
            command=self.on_settings_changed
        ).pack(anchor='w', pady=2)
        
        self.real_time_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            left_options,
            text="‚è±Ô∏è Val√≥s idej≈± monitoring",
            variable=self.real_time_var,
            command=self.on_settings_changed
        ).pack(anchor='w', pady=2)
        
        # Jobb oldali opci√≥k
        right_options = ttk.Frame(options_frame)
        right_options.pack(side='right', fill='both', expand=True)
        
        self.detailed_logging_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(
            right_options,
            text="üìù R√©szletes napl√≥z√°s",
            variable=self.detailed_logging_var,
            command=self.on_settings_changed
        ).pack(anchor='w', pady=2)
        
        ttk.Button(
            right_options,
            text="üìä Teljes√≠tm√©ny riport",
            command=self.generate_performance_report
        ).pack(anchor='w', pady=2)
        
        # Dashboard el≈ën√©zet ter√ºlet (k√©s≈ëbbi fejleszt√©shez)
        preview_frame = ttk.LabelFrame(self.dashboard_frame, text="üëÅÔ∏è Dashboard El≈ën√©zet", padding=10)
        preview_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        preview_info = ttk.Label(
            preview_frame,
            text="A dashboard el≈ën√©zet funkci√≥ fejleszt√©s alatt √°ll.\nKattints a 'Megnyit√°s' gombokra a teljes fel√ºlet el√©r√©s√©hez.",
            justify='center',
            font=('Arial', 10)
        )
        preview_info.pack(expand=True)
    
    def setup_testing_view(self):
        """Be√°ll√≠tja a tesztel√©si n√©zetet"""
        self.testing_frame = ttk.Frame(self.content_frame)
        
        # Tesztel√©si opci√≥k
        test_panel = ttk.LabelFrame(self.testing_frame, text="üîß Tesztel√©si Eszk√∂z√∂k", padding=10)
        test_panel.pack(fill='x', padx=10, pady=10)
        
        # Gyors tesztek
        quick_tests_frame = ttk.Frame(test_panel)
        quick_tests_frame.pack(fill='x')
        
        ttk.Button(
            quick_tests_frame,
            text="üîç AI modulok tesztel√©se",
            command=self.test_ai_modules
        ).pack(side='left', padx=(0, 10))
        
        ttk.Button(
            quick_tests_frame,
            text="üìä Dashboard kapcsolat",
            command=self.test_dashboard_connection
        ).pack(side='left', padx=(0, 10))
        
        ttk.Button(
            quick_tests_frame,
            text="üåê WebApp st√°tusz",
            command=self.test_webapp_status
        ).pack(side='left')
        
        # Tesztel√©si eredm√©nyek
        results_panel = ttk.LabelFrame(self.testing_frame, text="üìã Tesztel√©si Eredm√©nyek", padding=10)
        results_panel.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.test_results_text = scrolledtext.ScrolledText(
            results_panel,
            height=20,
            wrap=tk.WORD,
            font=('Consolas', 9)
        )
        self.test_results_text.pack(fill='both', expand=True)
    
    def setup_results_view(self):
        """Be√°ll√≠tja az eredm√©nyek n√©zetet"""
        self.results_frame = ttk.Frame(self.content_frame)
        
        # Eredm√©nyek list√°ja
        list_panel = ttk.LabelFrame(self.results_frame, text="üìã Futtatott Tanp√©ld√°k", padding=10)
        list_panel.pack(side='left', fill='both', expand=True, padx=(10, 5), pady=10)
        
        self.results_tree = ttk.Treeview(
            list_panel,
            columns=('D√°tum', 'Kateg√≥ria', '√Ållapot', 'Id≈ëtartam', 'Pontsz√°m'),
            show='headings',
            height=15
        )
        
        # Oszlop fejl√©cek
        self.results_tree.heading('D√°tum', text='D√°tum')
        self.results_tree.heading('Kateg√≥ria', text='Kateg√≥ria')
        self.results_tree.heading('√Ållapot', text='√Ållapot')
        self.results_tree.heading('Id≈ëtartam', text='Id≈ëtartam')
        self.results_tree.heading('Pontsz√°m', text='Pontsz√°m')
        
        # Oszlop sz√©less√©gek
        self.results_tree.column('D√°tum', width=130)
        self.results_tree.column('Kateg√≥ria', width=120)
        self.results_tree.column('√Ållapot', width=100)
        self.results_tree.column('Id≈ëtartam', width=100)
        self.results_tree.column('Pontsz√°m', width=80)
        
        self.results_tree.pack(fill='both', expand=True)
        self.results_tree.bind('<<TreeviewSelect>>', self.on_result_selected)
        
        # R√©szletek panel
        details_panel = ttk.LabelFrame(self.results_frame, text="üìä R√©szletes Eredm√©nyek", padding=10)
        details_panel.pack(side='right', fill='both', expand=True, padx=(5, 10), pady=10)
        
        self.details_text = scrolledtext.ScrolledText(
            details_panel,
            height=15,
            wrap=tk.WORD,
            font=('Consolas', 9),
            state='disabled'
        )
        self.details_text.pack(fill='both', expand=True)
        
        # Export √©s akci√≥k
        actions_panel = ttk.Frame(details_panel)
        actions_panel.pack(fill='x', pady=(10, 0))
        
        ttk.Button(
            actions_panel,
            text="üì§ Export JSON",
            command=self.export_results_json
        ).pack(side='left', padx=(0, 10))
        
        ttk.Button(
            actions_panel,
            text="üìã Riport gener√°l√°s",
            command=self.generate_results_report
        ).pack(side='left', padx=(0, 10))
        
        ttk.Button(
            actions_panel,
            text="üóëÔ∏è T√∂rl√©s",
            command=self.clear_selected_result
        ).pack(side='left')
    
    def setup_status_bar(self):
        """Be√°ll√≠tja az als√≥ st√°tusz s√°vot"""
        self.status_frame = ttk.Frame(self.frame, relief=tk.SUNKEN, borderwidth=1)
        self.status_frame.pack(side='bottom', fill='x')
        
        # Bal oldali st√°tusz
        self.main_status_label = ttk.Label(
            self.status_frame,
            text="K√©sz",
            font=('Arial', 9)
        )
        self.main_status_label.pack(side='left', padx=10, pady=2)
        
        # Jobb oldali inform√°ci√≥k
        right_status_frame = ttk.Frame(self.status_frame)
        right_status_frame.pack(side='right', padx=10, pady=2)
        
        self.ai_status_label = ttk.Label(
            right_status_frame,
            text=f"AI: {'‚úÖ' if self.ai_modules_available else '‚ùå'}",
            font=('Arial', 9)
        )
        self.ai_status_label.pack(side='right', padx=5)
        
        ttk.Separator(right_status_frame, orient='vertical').pack(side='right', fill='y', padx=5)
        
        self.time_label = ttk.Label(
            right_status_frame,
            text=datetime.now().strftime("%H:%M:%S"),
            font=('Arial', 9)
        )
        self.time_label.pack(side='right', padx=5)
        
        # Id≈ëz√≠t≈ë a st√°tusz friss√≠t√©s√©hez
        self.update_time()
    
    def get_example_categories(self):
        """Visszaadja a tanp√©lda kateg√≥ri√°kat √©s le√≠r√°sukat"""
        return {
            "üî∞ Alapvet≈ë Excel elemz√©s": "basic",
            "üìà Grafikonok tan√≠t√°sa": "charts", 
            "üßÆ K√©pletek tan√≠t√°sa": "formulas",
            "ü§ñ ML modellek": "ml_models",
            "üîÑ Teljes tanul√°si folyamat": "pipeline",
            "üöÄ Halad√≥ funkci√≥k": "advanced"
        }
    
    def get_example_descriptions(self):
        """Visszaadja a tanp√©lda le√≠r√°sokat"""
        return {
            "basic": """üî∞ ALAPVET≈ê EXCEL ELEMZ√âS

üìã Le√≠r√°s:
Ez a tanp√©lda bemutatja az Excel f√°jlok alapvet≈ë elemz√©s√©t √©s strukt√∫ra 
felismer√©s√©t. T√∂k√©letes kezd≈ëknek √©s az AI rendszer megismer√©s√©hez.

üéØ Mit fogsz megtanulni:
‚Ä¢ Excel f√°jl strukt√∫ra automatikus felismer√©se
‚Ä¢ Adatok t√≠pus√°nak √©s form√°tum√°nak elemz√©se  
‚Ä¢ Oszlopok √©s sorok kapcsolatainak felder√≠t√©se
‚Ä¢ Egyszer≈± statisztik√°k √©s √∂sszefoglal√≥k gener√°l√°sa
‚Ä¢ Adatmin≈ës√©g ellen≈ërz√©s √©s valid√°ci√≥

‚è±Ô∏è Id≈ëtartam: 2-3 perc
üìä Neh√©zs√©gi szint: Kezd≈ë
üéñÔ∏è V√°rhat√≥ eredm√©ny: 85-95% pontoss√°g""",

            "charts": """üìà GRAFIKONOK TAN√çT√ÅSA

üìã Le√≠r√°s:
Ez a tanp√©lda a grafikonok √©s vizualiz√°ci√≥k mesters√©ges intelligencia 
alap√∫ tan√≠t√°s√°t √©s gener√°l√°s√°t mutatja be.

üéØ Mit fogsz megtanulni:
‚Ä¢ Excel grafikonok t√≠pus√°nak automatikus felismer√©se
‚Ä¢ Adatok √©s grafikonok k√∂z√∂tti kapcsolatok elemz√©se
‚Ä¢ Grafikon st√≠lusok, sz√≠nek √©s form√°z√°sok tan√≠t√°sa
‚Ä¢ √öj grafikonok intelligens gener√°l√°sa
‚Ä¢ Vizualiz√°ci√≥s best practice-ek alkalmaz√°sa

‚è±Ô∏è Id≈ëtartam: 3-4 perc
üìä Neh√©zs√©gi szint: K√∂zepes
üéñÔ∏è V√°rhat√≥ eredm√©ny: 78-88% pontoss√°g""",

            "formulas": """üßÆ K√âPLETEK TAN√çT√ÅSA

üìã Le√≠r√°s:
Ez a tanp√©lda az Excel k√©pletek √©s f√ºggv√©nyek mesters√©ges intelligencia
alap√∫ tan√≠t√°s√°t √©s gener√°l√°s√°t mutatja be.

üéØ Mit fogsz megtanulni:
‚Ä¢ Excel k√©pletek mint√°zatainak felismer√©se
‚Ä¢ Matematikai √©s logikai kapcsolatok tan√≠t√°sa
‚Ä¢ K√©plet f√ºgg≈ës√©gek √©s referenci√°k elemz√©se
‚Ä¢ √öj k√©pletek intelligens gener√°l√°sa
‚Ä¢ Komplex sz√°m√≠t√°sok optimaliz√°l√°sa

‚è±Ô∏è Id≈ëtartam: 2-3 perc
üìä Neh√©zs√©gi szint: K√∂zepes
üéñÔ∏è V√°rhat√≥ eredm√©ny: 80-90% pontoss√°g""",

            "ml_models": """ü§ñ G√âPI TANUL√ÅSI MODELLEK

üìã Le√≠r√°s:
Ez a tanp√©lda a g√©pi tanul√°si modellek Excel adatokon val√≥ alkalmaz√°s√°t
√©s teljes√≠tm√©nymonitoroz√°s√°t mutatja be.

üéØ Mit fogsz megtanulni:
‚Ä¢ ML modellek Excel adatokra t√∂rt√©n≈ë alkalmaz√°sa
‚Ä¢ Predikt√≠v elemz√©s √©s trend felismer√©s
‚Ä¢ Anom√°lia detekt√°l√°s √©s kiv√©telkezel√©s
‚Ä¢ Modellek teljes√≠tm√©ny√©nek monitoroz√°sa
‚Ä¢ Automatikus model optimaliz√°l√°s

‚è±Ô∏è Id≈ëtartam: 4-5 perc
üìä Neh√©zs√©gi szint: Halad√≥
üéñÔ∏è V√°rhat√≥ eredm√©ny: 88-96% pontoss√°g""",

            "pipeline": """üîÑ TELJES TANUL√ÅSI FOLYAMAT

üìã Le√≠r√°s:
Ez a tanp√©lda a komplett end-to-end AI Excel Learning pipeline-t
mutatja be, minden f≈ë komponenssel.

üéØ Mit fogsz megtanulni:
‚Ä¢ Teljes automatikus adatfeldolgoz√°si folyamat
‚Ä¢ Integr√°lt elemz√©s, tan√≠t√°s √©s gener√°l√°s
‚Ä¢ Folyamatos tanul√°s √©s √∂nfejleszt√©s
‚Ä¢ Teljes√≠tm√©ny optimaliz√°l√°s √©s sk√°l√°z√°s
‚Ä¢ Production-ready AI rendszer m≈±k√∂d√©se

‚è±Ô∏è Id≈ëtartam: 5-6 perc
üìä Neh√©zs√©gi szint: Halad√≥
üéñÔ∏è V√°rhat√≥ eredm√©ny: 90-98% pontoss√°g""",

            "advanced": """üöÄ HALAD√ì FUNKCI√ìK

üìã Le√≠r√°s:
Ez a tanp√©lda a legfejlettebb AI Excel Learning funkci√≥kat √©s
enterprise-szint≈± k√©pess√©geket mutatja be.

üéØ Mit fogsz megtanulni:
‚Ä¢ Komplex Excel munkaf√ºzetek teljes elemz√©se
‚Ä¢ T√∂bb munkalap k√∂z√∂tti √∂sszetett kapcsolatok
‚Ä¢ Makr√≥k √©s VBA k√≥d automatikus elemz√©se
‚Ä¢ Automatikus dokument√°ci√≥ √©s riport gener√°l√°s
‚Ä¢ Enterprise integr√°ci√≥ √©s sk√°l√°zhat√≥s√°g

‚è±Ô∏è Id≈ëtartam: 3-4 perc
üìä Neh√©zs√©gi szint: Szak√©rt≈ë
üéñÔ∏è V√°rhat√≥ eredm√©ny: 92-99% pontoss√°g"""
        }
    
    # UI esem√©nykezel≈ë met√≥dusok
    def show_examples_view(self):
        """Megjelen√≠ti a tanp√©ld√°k n√©zetet"""
        self._hide_all_views()
        self.examples_frame.pack(fill='both', expand=True)
        self.main_status_label.config(text="Tanp√©ld√°k n√©zet")
    
    def show_dashboard_view(self):
        """Megjelen√≠ti a dashboard n√©zetet"""
        self._hide_all_views()
        self.dashboard_frame.pack(fill='both', expand=True)
        self.main_status_label.config(text="Dashboard n√©zet")
    
    def show_testing_view(self):
        """Megjelen√≠ti a tesztel√©si n√©zetet"""
        self._hide_all_views()
        self.testing_frame.pack(fill='both', expand=True)
        self.main_status_label.config(text="Tesztel√©si n√©zet")
    
    def show_results_view(self):
        """Megjelen√≠ti az eredm√©nyek n√©zetet"""
        self._hide_all_views()
        self.results_frame.pack(fill='both', expand=True)
        self.main_status_label.config(text="Eredm√©nyek n√©zet")
        self.load_results()
    
    def _hide_all_views(self):
        """Elrejti az √∂sszes n√©zetet"""
        for frame in [self.examples_frame, self.dashboard_frame, 
                     self.testing_frame, self.results_frame]:
            frame.pack_forget()
    
    def on_category_changed(self, event=None):
        """Kateg√≥ria v√°ltoz√°sakor friss√≠ti a le√≠r√°st"""
        self.update_description()
    
    def update_description(self):
        """Friss√≠ti a kiv√°lasztott kateg√≥ria le√≠r√°s√°t"""
        category_display = self.category_var.get()
        categories = self.get_example_categories()
        category_id = categories.get(category_display, "basic")
        
        descriptions = self.get_example_descriptions()
        description = descriptions.get(category_id, "Le√≠r√°s nem el√©rhet≈ë")
        
        self.description_text.config(state='normal')
        self.description_text.delete(1.0, tk.END)
        self.description_text.insert(1.0, description)
        self.description_text.config(state='disabled')
    
    def refresh_status(self):
        """Friss√≠ti a rendszer √°llapot inform√°ci√≥kat"""
        # St√°tusz fa t√∂rl√©se
        for item in self.status_tree.get_children():
            self.status_tree.delete(item)
        
        # AI modulok √°llapot√°nak ellen≈ërz√©se
        modules = {
            "Excel Analyzer": self._check_module("excel_analyzer"),
            "Chart Learner": self._check_module("chart_learner"),
            "Formula Learner": self._check_module("formula_learner"),
            "ML Models": self._check_module("ml_models"),
            "Learning Pipeline": self._check_module("learning_pipeline"),
            "Dashboard": self._check_dashboard_status(),
            "WebApp": self._check_webapp_status()
        }
        
        # Modulok hozz√°ad√°sa a f√°hoz
        for module_name, status in modules.items():
            status_text = "‚úÖ Akt√≠v" if status else "‚ùå Inakt√≠v"
            self.status_tree.insert("", "end", text=module_name, values=(status_text,))
        
        # Metrik√°k friss√≠t√©se
        self.update_metrics()
    
    def _check_module(self, module_name):
        """Ellen≈ërzi egy adott modul el√©rhet≈ës√©g√©t"""
        try:
            if module_name == "excel_analyzer":
                from src.ai_excel_learning.excel_analyzer import ExcelAnalyzer
            elif module_name == "chart_learner":
                from src.ai_excel_learning.chart_learner import ChartLearner
            elif module_name == "formula_learner":
                from src.ai_excel_learning.formula_learner import FormulaLearner
            elif module_name == "ml_models":
                from src.ai_excel_learning.ml_models import ExcelMLModels
            elif module_name == "learning_pipeline":
                from src.ai_excel_learning.learning_pipeline import LearningPipeline
            return True
        except ImportError:
            return False
    
    def _check_dashboard_status(self):
        """Ellen≈ërzi a dashboard √°llapot√°t"""
        return self.dashboard_process is not None and self.dashboard_process.poll() is None
    
    def _check_webapp_status(self):
        """Ellen≈ërzi a webapp √°llapot√°t"""
        return self.webapp_process is not None and self.webapp_process.poll() is None
    
    def update_metrics(self):
        """Friss√≠ti a teljes√≠tm√©ny metrik√°kat"""
        total_runs = len(self.demo_results)
        successful_runs = sum(1 for r in self.demo_results.values() if r.get("success", False))
        success_rate = (successful_runs / total_runs * 100) if total_runs > 0 else 0
        
        avg_time = 0
        if total_runs > 0:
            times = [float(r.get("duration", "0s").replace("s", "")) for r in self.demo_results.values()]
            avg_time = sum(times) / len(times)
        
        errors = total_runs - successful_runs
        
        self.metrics_labels["Futtat√°sok"].config(text=str(total_runs))
        self.metrics_labels["Sikeress√©g"].config(text=f"{success_rate:.1f}%")
        self.metrics_labels["√Åtlagos id≈ë"].config(text=f"{avg_time:.1f}s")
        self.metrics_labels["Hib√°k"].config(text=str(errors))
    
    def update_time(self):
        """Friss√≠ti az id≈ët a st√°tusz s√°vban"""
        current_time = datetime.now().strftime("%H:%M:%S")
        self.time_label.config(text=current_time)
        self.frame.after(1000, self.update_time)
    
    # Tanp√©lda futtat√°si met√≥dusok
    def run_selected_demo(self):
        """Futtatja a kiv√°lasztott tanp√©ld√°t"""
        if self.demo_running:
            messagebox.showwarning("Figyelmeztet√©s", "M√°r fut egy tanp√©lda!")
            return
        
        category_display = self.category_var.get()
        categories = self.get_example_categories()
        category = categories.get(category_display)
        
        if not category:
            messagebox.showerror("Hiba", "V√°lassz ki egy kateg√≥ri√°t!")
            return
        
        # UI friss√≠t√©se
        self.demo_running = True
        self.run_demo_btn.config(state='disabled')
        self.stop_demo_btn.config(state='normal')
        self.progress_bar.start()
        self.status_label.config(text=f"Futtat√°s: {category_display}")
        
        # Demo futtat√°sa k√ºl√∂n sz√°lban
        self.demo_thread = threading.Thread(
            target=self._run_demo_worker,
            args=(category, category_display)
        )
        self.demo_thread.daemon = True
        self.demo_thread.start()
        
        app_logger.info(f"Tanp√©lda ind√≠tva: {category}")
    
    def _run_demo_worker(self, category, category_display):
        """Worker sz√°l a demo futtat√°s√°hoz"""
        try:
            start_time = time.time()
            
            # Demo futtat√°sa t√≠pus szerint
            demo_methods = {
                "basic": self._run_basic_demo,
                "charts": self._run_charts_demo,
                "formulas": self._run_formulas_demo,
                "ml_models": self._run_ml_models_demo,
                "pipeline": self._run_pipeline_demo,
                "advanced": self._run_advanced_demo
            }
            
            demo_method = demo_methods.get(category, self._run_default_demo)
            result = demo_method()
            
            end_time = time.time()
            duration = end_time - start_time
            
            # Eredm√©ny √∂ssze√°ll√≠t√°sa
            result_data = {
                "category": category,
                "category_display": category_display,
                "timestamp": datetime.now().isoformat(),
                "duration": f"{duration:.2f}s",
                "success": result.get("success", False),
                "score": result.get("score", 0),
                "details": result
            }
            
            # Eredm√©ny ment√©se
            result_key = f"{category}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            self.demo_results[result_key] = result_data
            
            # UI friss√≠t√©se f≈ë sz√°lban
            self.frame.after(0, self._demo_completed, result_data)
            
        except Exception as e:
            error_result = {
                "category": category,
                "category_display": category_display,
                "timestamp": datetime.now().isoformat(),
                "duration": "0s",
                "success": False,
                "score": 0,
                "details": {"error": str(e)}
            }
            self.frame.after(0, self._demo_completed, error_result)
            app_logger.error(f"Demo hiba ({category}): {str(e)}")
    
    def _run_basic_demo(self):
        """Alapvet≈ë Excel elemz√©s demo"""
        try:
            # Szimul√°lt feldolgoz√°s l√©p√©sekkel
            self._update_demo_status("Excel f√°jlok bet√∂lt√©se...")
            time.sleep(0.8)
            
            self._update_demo_status("Strukt√∫ra elemz√©se...")
            time.sleep(1.0)
            
            self._update_demo_status("Adatt√≠pusok felismer√©se...")
            time.sleep(0.7)
            
            self._update_demo_status("Statisztik√°k gener√°l√°sa...")
            time.sleep(0.5)
            
            return {
                "success": True,
                "score": 92,
                "message": "Alapvet≈ë Excel elemz√©s sikeresen lefutott",
                "files_analyzed": 3,
                "patterns_found": 8,
                "data_types_detected": ["text", "number", "date", "currency"],
                "statistics_generated": 15,
                "processing_time": "3.0s"
            }
        except Exception as e:
            return {"success": False, "score": 0, "error": str(e)}
    
    def _run_charts_demo(self):
        """Grafikonok tan√≠t√°sa demo"""
        try:
            self._update_demo_status("Grafikon t√≠pusok felismer√©se...")
            time.sleep(1.2)
            
            self._update_demo_status("Adatok √©s grafikonok √∂sszekapcsol√°sa...")
            time.sleep(1.5)
            
            self._update_demo_status("St√≠lusok √©s form√°z√°sok tan√≠t√°sa...")
            time.sleep(1.0)
            
            self._update_demo_status("√öj grafikonok gener√°l√°sa...")
            time.sleep(0.8)
            
            return {
                "success": True,
                "score": 84,
                "message": "Grafikon tan√≠t√°s sikeresen lefutott",
                "charts_analyzed": 12,
                "chart_types_learned": ["scatter", "line", "bar", "pie", "combo"],
                "styles_learned": 18,
                "charts_generated": 3,
                "processing_time": "4.5s"
            }
        except Exception as e:
            return {"success": False, "score": 0, "error": str(e)}
    
    def _run_formulas_demo(self):
        """K√©pletek tan√≠t√°sa demo"""
        try:
            self._update_demo_status("K√©plet mint√°zatok felismer√©se...")
            time.sleep(1.0)
            
            self._update_demo_status("F√ºgg≈ës√©gek elemz√©se...")
            time.sleep(1.3)
            
            self._update_demo_status("Logikai kapcsolatok tan√≠t√°sa...")
            time.sleep(0.9)
            
            self._update_demo_status("√öj k√©pletek gener√°l√°sa...")
            time.sleep(0.8)
            
            return {
                "success": True,
                "score": 89,
                "message": "K√©plet tan√≠t√°s sikeresen lefutott",
                "formulas_analyzed": 24,
                "patterns_learned": ["mathematical", "logical", "lookup", "statistical"],
                "dependencies_mapped": 45,
                "formulas_generated": 8,
                "processing_time": "4.0s"
            }
        except Exception as e:
            return {"success": False, "score": 0, "error": str(e)}
    
    def _run_ml_models_demo(self):
        """ML modellek demo"""
        try:
            self._update_demo_status("ML modellek inicializ√°l√°sa...")
            time.sleep(1.5)
            
            self._update_demo_status("Adatok el≈ëfeldolgoz√°sa...")
            time.sleep(2.0)
            
            self._update_demo_status("Modellek tan√≠t√°sa...")
            time.sleep(2.5)
            
            self._update_demo_status("Teljes√≠tm√©ny √©rt√©kel√©se...")
            time.sleep(1.0)
            
            return {
                "success": True,
                "score": 96,
                "message": "ML modellek sikeresen tanultak",
                "models_trained": 3,
                "accuracy": "96.2%",
                "predictions_made": 150,
                "anomalies_detected": 2,
                "processing_time": "7.0s"
            }
        except Exception as e:
            return {"success": False, "score": 0, "error": str(e)}
    
    def _run_pipeline_demo(self):
        """Teljes tanul√°si folyamat demo"""
        try:
            self._update_demo_status("Pipeline inicializ√°l√°sa...")
            time.sleep(1.0)
            
            self._update_demo_status("Adatok bet√∂lt√©se √©s valid√°l√°sa...")
            time.sleep(1.8)
            
            self._update_demo_status("Elemz√©s √©s tan√≠t√°s...")
            time.sleep(2.5)
            
            self._update_demo_status("Modellek integr√°l√°sa...")
            time.sleep(1.5)
            
            self._update_demo_status("Eredm√©nyek optimaliz√°l√°sa...")
            time.sleep(1.2)
            
            return {
                "success": True,
                "score": 94,
                "message": "Teljes tanul√°si folyamat sikeresen lefutott",
                "total_files": 18,
                "total_patterns": 42,
                "models_integrated": 5,
                "optimization_rounds": 3,
                "processing_time": "8.0s"
            }
        except Exception as e:
            return {"success": False, "score": 0, "error": str(e)}
    
    def _run_advanced_demo(self):
        """Halad√≥ funkci√≥k demo"""
        try:
            self._update_demo_status("Komplex munkaf√ºzetek elemz√©se...")
            time.sleep(1.3)
            
            self._update_demo_status("Munkalapok k√∂z√∂tti kapcsolatok...")
            time.sleep(1.7)
            
            self._update_demo_status("VBA k√≥d elemz√©se...")
            time.sleep(1.8)
            
            self._update_demo_status("Dokument√°ci√≥ gener√°l√°sa...")
            time.sleep(1.2)
            
            return {
                "success": True,
                "score": 98,
                "message": "Halad√≥ funkci√≥k sikeresen lefutottak",
                "complex_workbooks": 6,
                "worksheets_analyzed": 23,
                "vba_macros_processed": 8,
                "documentation_pages": 15,
                "processing_time": "6.0s"
            }
        except Exception as e:
            return {"success": False, "score": 0, "error": str(e)}
    
    def _run_default_demo(self):
        """Alap√©rtelmezett demo ismeretlen kateg√≥ri√°k eset√©n"""
        time.sleep(2.0)
        return {
            "success": False,
            "score": 0,
            "error": "Ismeretlen kateg√≥ria"
        }
    
    def _update_demo_status(self, status):
        """Friss√≠ti a demo √°llapot√°t a f≈ë sz√°lban"""
        def update():
            self.status_label.config(text=status)
        self.frame.after(0, update)
    
    def _demo_completed(self, result_data):
        """Demo befejez√©se ut√°n friss√≠ti a UI-t"""
        self.demo_running = False
        self.run_demo_btn.config(state='normal')
        self.stop_demo_btn.config(state='disabled')
        self.progress_bar.stop()
        
        if result_data["success"]:
            self.status_label.config(text=f"‚úÖ Sikeres - Pontsz√°m: {result_data['score']}%")
            messagebox.showinfo(
                "Siker", 
                f"Tanp√©lda sikeresen lefutott!\n"
                f"Kateg√≥ria: {result_data['category_display']}\n"
                f"Pontsz√°m: {result_data['score']}%\n"
                f"Id≈ëtartam: {result_data['duration']}"
            )
        else:
            self.status_label.config(text="‚ùå Hiba t√∂rt√©nt")
            error_msg = result_data['details'].get('error', 'Ismeretlen hiba')
            messagebox.showerror("Hiba", f"Tanp√©lda hib√°val lefutott:\n{error_msg}")
        
        # St√°tusz √©s metrik√°k friss√≠t√©se
        self.refresh_status()
        
        app_logger.info(f"Demo befejezve: {result_data['category']} - {'sikeres' if result_data['success'] else 'sikertelen'}")
    
    def stop_demo(self):
        """Le√°ll√≠tja a fut√≥ tanp√©ld√°t"""
        if self.demo_running:
            self.demo_running = False
            self.status_label.config(text="Tanp√©lda le√°ll√≠tva")
            self.progress_bar.stop()
            self.run_demo_btn.config(state='normal')
            self.stop_demo_btn.config(state='disabled')
            app_logger.info("Demo manu√°lisan le√°ll√≠tva")
    
    def show_demo_details(self):
        """Megjelen√≠ti a kiv√°lasztott demo r√©szleteit"""
        category_display = self.category_var.get()
        categories = self.get_example_categories()
        category = categories.get(category_display)
        
        if not category:
            return
        
        # R√©szletek ablak l√©trehoz√°sa
        details_window = tk.Toplevel(self.frame)
        details_window.title(f"Tanp√©lda R√©szletek - {category_display}")
        details_window.geometry("600x500")
        details_window.transient(self.frame)
        details_window.grab_set()
        
        # Tartalom
        text_frame = ttk.Frame(details_window, padding=10)
        text_frame.pack(fill='both', expand=True)
        
        text_widget = scrolledtext.ScrolledText(
            text_frame,
            wrap=tk.WORD,
            font=('Consolas', 10)
        )
        text_widget.pack(fill='both', expand=True)
        
        # R√©szletes le√≠r√°s
        descriptions = self.get_example_descriptions()
        description = descriptions.get(category, "R√©szletek nem el√©rhet≈ëk")
        
        text_widget.insert(tk.END, description)
        text_widget.insert(tk.END, "\n\n" + "="*60 + "\n")
        text_widget.insert(tk.END, "TECHNIKAI INFORM√ÅCI√ìK\n")
        text_widget.insert(tk.END, "="*60 + "\n\n")
        
        # Technikai inf√≥k
        tech_info = f"""Kateg√≥ria ID: {category}
AI Modulok: {'El√©rhet≈ë' if self.ai_modules_available else 'Nem el√©rhet≈ë'}
Futtat√°si k√∂rnyezet: Desktop GUI
P√°rhuzamos feldolgoz√°s: T√°mogatott
Eredm√©ny ment√©s: Automatikus
Export form√°tumok: JSON, TXT, HTML

Rendszerk√∂vetelm√©nyek:
- Python 3.8+
- AI Excel Learning modulok
- Minimum 4GB RAM
- 100MB szabad hely"""
        
        text_widget.insert(tk.END, tech_info)
        text_widget.config(state='disabled')
        
        # Bez√°r√°s gomb
        ttk.Button(
            details_window,
            text="Bez√°r√°s",
            command=details_window.destroy
        ).pack(pady=10)
    
    # Dashboard √©s webapp kezel√©s
    def launch_webapp(self):
        """Elind√≠tja a webapp-ot"""
        if self.webapp_process and self.webapp_process.poll() is None:
            messagebox.showinfo("Inform√°ci√≥", "WebApp m√°r fut!")
            self.open_webapp()
            return
        
        self.start_webapp()
    
    def toggle_dashboard(self):
        """V√°ltogatja a dashboard √°llapot√°t"""
        if self._check_dashboard_status():
            self.stop_dashboard()
        else:
            self.start_dashboard()
    
    def start_dashboard(self):
        """Ind√≠tja az AI Dashboard-ot"""
        try:
            dashboard_script = Path(__file__).parent.parent / "ai_excel_learning" / "ai_dashboard.py"
            
            if not dashboard_script.exists():
                messagebox.showerror("Hiba", "AI Dashboard script nem tal√°lhat√≥!")
                return
            
            # Dashboard ind√≠t√°sa
            self.dashboard_process = subprocess.Popen([
                sys.executable, "-m", "streamlit", "run", str(dashboard_script),
                "--server.port", "8501",
                "--server.headless", "true",
                "--browser.gatherUsageStats", "false"
            ])
            
            # V√°rakoz√°s az indul√°sra
            time.sleep(2)
            
            # UI friss√≠t√©se
            self.start_dashboard_btn.config(state='disabled')
            self.open_dashboard_btn.config(state='normal')
            self.dashboard_status_label.config(
                text="‚úÖ Fut (localhost:8501)",
                foreground="green"
            )
            
            messagebox.showinfo("Siker", "AI Dashboard sikeresen elindult!")
            app_logger.info("AI Dashboard elind√≠tva")
            
        except Exception as e:
            messagebox.showerror("Hiba", f"Dashboard ind√≠t√°sa sikertelen:\n{str(e)}")
            app_logger.error(f"Dashboard ind√≠t√°si hiba: {str(e)}")
    
    def stop_dashboard(self):
        """Le√°ll√≠tja az AI Dashboard-ot"""
        if self.dashboard_process:
            try:
                self.dashboard_process.terminate()
                self.dashboard_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.dashboard_process.kill()
            
            self.dashboard_process = None
            
            # UI friss√≠t√©se
            self.start_dashboard_btn.config(state='normal')
            self.open_dashboard_btn.config(state='disabled')
            self.dashboard_status_label.config(
                text="‚ùå Nincs elind√≠tva",
                foreground="black"
            )
            
            app_logger.info("AI Dashboard le√°ll√≠tva")
    
    def open_dashboard(self):
        """Megnyitja a dashboard-ot a b√∂ng√©sz≈ëben"""
        try:
            webbrowser.open(self.dashboard_url)
        except Exception as e:
            messagebox.showerror("Hiba", f"Dashboard megnyit√°sa sikertelen:\n{str(e)}")
    
    def start_webapp(self):
        """Ind√≠tja a WebApp-ot"""
        try:
            webapp_script = Path(__file__).parent.parent / "ai_excel_learning" / "webapp_demo.py"
            
            if not webapp_script.exists():
                messagebox.showerror("Hiba", "WebApp script nem tal√°lhat√≥!")
                return
            
            # WebApp ind√≠t√°sa
            self.webapp_process = subprocess.Popen([
                sys.executable, "-m", "streamlit", "run", str(webapp_script),
                "--server.port", "8502",
                "--server.headless", "true",
                "--browser.gatherUsageStats", "false"
            ])
            
            # V√°rakoz√°s az indul√°sra
            time.sleep(3)
            
            # UI friss√≠t√©se
            self.start_webapp_btn.config(state='disabled')
            self.open_webapp_btn.config(state='normal')
            self.webapp_status_label.config(
                text="‚úÖ Fut (localhost:8502)",
                foreground="green"
            )
            
            messagebox.showinfo("Siker", "WebApp sikeresen elindult!")
            app_logger.info("WebApp elind√≠tva")
            
        except Exception as e:
            messagebox.showerror("Hiba", f"WebApp ind√≠t√°sa sikertelen:\n{str(e)}")
            app_logger.error(f"WebApp ind√≠t√°si hiba: {str(e)}")
    
    def stop_webapp(self):
        """Le√°ll√≠tja a WebApp-ot"""
        if self.webapp_process:
            try:
                self.webapp_process.terminate()
                self.webapp_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.webapp_process.kill()
            
            self.webapp_process = None
            
            # UI friss√≠t√©se
            self.start_webapp_btn.config(state='normal')
            self.open_webapp_btn.config(state='disabled')
            self.webapp_status_label.config(
                text="‚ùå Nincs elind√≠tva",
                foreground="black"
            )
            
            app_logger.info("WebApp le√°ll√≠tva")
    
    def open_webapp(self):
        """Megnyitja a WebApp-ot a b√∂ng√©sz≈ëben"""
        try:
            webbrowser.open(self.webapp_url)
        except Exception as e:
            messagebox.showerror("Hiba", f"WebApp megnyit√°sa sikertelen:\n{str(e)}")
    
    # Tesztel√©si funkci√≥k
    def test_ai_modules(self):
        """Teszteli az AI modulok el√©rhet≈ës√©g√©t"""
        self.test_results_text.insert(tk.END, f"\n{'='*60}\n")
        self.test_results_text.insert(tk.END, f"AI MODULOK TESZTEL√âSE - {datetime.now().strftime('%H:%M:%S')}\n")
        self.test_results_text.insert(tk.END, f"{'='*60}\n\n")
        
        modules_to_test = [
            ("excel_analyzer", "Excel Analyzer"),
            ("chart_learner", "Chart Learner"),
            ("formula_learner", "Formula Learner"),
            ("ml_models", "ML Models"),
            ("learning_pipeline", "Learning Pipeline")
        ]
        
        for module_id, module_name in modules_to_test:
            try:
                status = self._check_module(module_id)
                status_text = "‚úÖ EL√âRHET≈ê" if status else "‚ùå NEM EL√âRHET≈ê"
                self.test_results_text.insert(tk.END, f"{module_name:20s}: {status_text}\n")
            except Exception as e:
                self.test_results_text.insert(tk.END, f"{module_name:20s}: ‚ùå HIBA - {str(e)}\n")
        
        self.test_results_text.insert(tk.END, "\nTeszt befejezve.\n")
        self.test_results_text.see(tk.END)
    
    def test_dashboard_connection(self):
        """Teszteli a dashboard kapcsolatot"""
        self.test_results_text.insert(tk.END, f"\n{'='*60}\n")
        self.test_results_text.insert(tk.END, f"DASHBOARD KAPCSOLAT TESZTEL√âSE - {datetime.now().strftime('%H:%M:%S')}\n")
        self.test_results_text.insert(tk.END, f"{'='*60}\n\n")
        
        # Dashboard folyamat ellen≈ërz√©se
        dashboard_running = self._check_dashboard_status()
        self.test_results_text.insert(tk.END, f"Dashboard folyamat: {'‚úÖ Fut' if dashboard_running else '‚ùå Nem fut'}\n")
        
        if dashboard_running:
            try:
                import requests
                response = requests.get(self.dashboard_url, timeout=5)
                if response.status_code == 200:
                    self.test_results_text.insert(tk.END, f"HTTP kapcsolat: ‚úÖ OK ({response.status_code})\n")
                else:
                    self.test_results_text.insert(tk.END, f"HTTP kapcsolat: ‚ö†Ô∏è Hib√°s st√°tusz ({response.status_code})\n")
            except ImportError:
                self.test_results_text.insert(tk.END, "HTTP teszt: ‚ùå requests modul hi√°nyzik\n")
            except Exception as e:
                self.test_results_text.insert(tk.END, f"HTTP kapcsolat: ‚ùå Hiba - {str(e)}\n")
        
        self.test_results_text.insert(tk.END, "\nTeszt befejezve.\n")
        self.test_results_text.see(tk.END)
    
    def test_webapp_status(self):
        """Teszteli a WebApp st√°tusz√°t"""
        self.test_results_text.insert(tk.END, f"\n{'='*60}\n")
        self.test_results_text.insert(tk.END, f"WEBAPP ST√ÅTUSZ TESZTEL√âSE - {datetime.now().strftime('%H:%M:%S')}\n")
        self.test_results_text.insert(tk.END, f"{'='*60}\n\n")
        
        # WebApp folyamat ellen≈ërz√©se
        webapp_running = self._check_webapp_status()
        self.test_results_text.insert(tk.END, f"WebApp folyamat: {'‚úÖ Fut' if webapp_running else '‚ùå Nem fut'}\n")
        
        if webapp_running:
            try:
                import requests
                response = requests.get(self.webapp_url, timeout=5)
                if response.status_code == 200:
                    self.test_results_text.insert(tk.END, f"HTTP kapcsolat: ‚úÖ OK ({response.status_code})\n")
                else:
                    self.test_results_text.insert(tk.END, f"HTTP kapcsolat: ‚ö†Ô∏è Hib√°s st√°tusz ({response.status_code})\n")
            except ImportError:
                self.test_results_text.insert(tk.END, "HTTP teszt: ‚ùå requests modul hi√°nyzik\n")
            except Exception as e:
                self.test_results_text.insert(tk.END, f"HTTP kapcsolat: ‚ùå Hiba - {str(e)}\n")
        
        self.test_results_text.insert(tk.END, "\nTeszt befejezve.\n")
        self.test_results_text.see(tk.END)
    
    # Eredm√©nyek kezel√©se
    def load_results(self):
        """Bet√∂lti a mentett eredm√©nyeket"""
        # Eredm√©nyek t√∂rl√©se
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # Eredm√©nyek hozz√°ad√°sa
        for result_key, result in self.demo_results.items():
            status = "‚úÖ Sikeres" if result["success"] else "‚ùå Sikertelen"
            score = f"{result['score']}%" if result['success'] else "0%"
            
            self.results_tree.insert("", "end", values=(
                result["timestamp"][:19].replace("T", " "),
                result.get("category_display", result["category"]),
                status,
                result["duration"],
                score
            ))
        
        # Eredm√©nyek rendez√©se d√°tum szerint (leg√∫jabb el√∂l)
        items = self.results_tree.get_children()
        items_data = [(self.results_tree.item(item)['values'], item) for item in items]
        items_data.sort(key=lambda x: x[0][0], reverse=True)
        
        for index, (values, item) in enumerate(items_data):
            self.results_tree.move(item, '', index)
    
    def on_result_selected(self, event=None):
        """Eredm√©ny kiv√°laszt√°sakor friss√≠ti a r√©szleteket"""
        selection = self.results_tree.selection()
        if not selection:
            return
        
        item = self.results_tree.item(selection[0])
        values = item['values']
        
        if len(values) < 2:
            return
        
        # Kateg√≥ria alapj√°n keres√©s az eredm√©nyekben
        category_display = values[1]
        timestamp = values[0]
        
        matching_result = None
        for result_key, result in self.demo_results.items():
            if (result.get("category_display", result["category"]) == category_display and 
                result["timestamp"][:19].replace("T", " ") == timestamp):
                matching_result = result
                break
        
        if matching_result:
            details = self._format_result_details(matching_result)
            
            self.details_text.config(state='normal')
            self.details_text.delete(1.0, tk.END)
            self.details_text.insert(1.0, details)
            self.details_text.config(state='disabled')
    
    def _format_result_details(self, result):
        """Form√°zza az eredm√©ny r√©szleteit"""
        lines = []
        lines.append(f"TANP√âLDA EREDM√âNY R√âSZLETEI")
        lines.append("=" * 40)
        lines.append(f"Kateg√≥ria: {result.get('category_display', result['category'])}")
        lines.append(f"Kateg√≥ria ID: {result['category']}")
        lines.append(f"D√°tum: {result['timestamp']}")
        lines.append(f"Id≈ëtartam: {result['duration']}")
        lines.append(f"√Ållapot: {'Sikeres' if result['success'] else 'Sikertelen'}")
        lines.append(f"Pontsz√°m: {result.get('score', 0)}%")
        lines.append("")
        
        if 'details' in result:
            details = result['details']
            if result['success']:
                lines.append("R√âSZLETES EREDM√âNYEK:")
                lines.append("-" * 20)
                for key, value in details.items():
                    if key not in ['success', 'score']:
                        if isinstance(value, list):
                            lines.append(f"{key}: {', '.join(map(str, value))}")
                        else:
                            lines.append(f"{key}: {value}")
            else:
                lines.append("HIBA√úZENET:")
                lines.append("-" * 20)
                lines.append(f"{details.get('error', 'Ismeretlen hiba')}")
        
        return "\n".join(lines)
    
    def export_results_json(self):
        """Export√°lja az eredm√©nyeket JSON form√°tumban"""
        if not self.demo_results:
            messagebox.showinfo("Inform√°ci√≥", "Nincsenek export√°lhat√≥ eredm√©nyek!")
            return
        
        try:
            filename = f"ai_excel_learning_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            filepath = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
                initialname=filename
            )
            
            if filepath:
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(self.demo_results, f, indent=2, ensure_ascii=False)
                
                messagebox.showinfo("Siker", f"Eredm√©nyek export√°lva: {filepath}")
                app_logger.info(f"Eredm√©nyek export√°lva: {filepath}")
        
        except Exception as e:
            messagebox.showerror("Hiba", f"Export√°l√°s sikertelen:\n{str(e)}")
            app_logger.error(f"Export hiba: {str(e)}")
    
    def generate_results_report(self):
        """Gener√°l egy √∂sszefoglal√≥ jelent√©st"""
        if not self.demo_results:
            messagebox.showinfo("Inform√°ci√≥", "Nincs adat a jelent√©s gener√°l√°s√°hoz!")
            return
        
        try:
            report = self._create_detailed_report()
            
            filename = f"ai_excel_learning_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            filepath = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
                initialname=filename
            )
            
            if filepath:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(report)
                
                messagebox.showinfo("Siker", f"Jelent√©s gener√°lva: {filepath}")
                app_logger.info(f"Jelent√©s gener√°lva: {filepath}")
        
        except Exception as e:
            messagebox.showerror("Hiba", f"Jelent√©s gener√°l√°sa sikertelen:\n{str(e)}")
            app_logger.error(f"Jelent√©s gener√°l√°si hiba: {str(e)}")
    
    def _create_detailed_report(self):
        """L√©trehozza a r√©szletes jelent√©st"""
        lines = []
        lines.append("=" * 80)
        lines.append("AI EXCEL LEARNING - R√âSZLETES √ñSSZEFOGLAL√ì JELENT√âS")
        lines.append("=" * 80)
        lines.append(f"Gener√°lva: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        lines.append(f"Rendszer verzi√≥: DataChaEnhanced v2.0.0")
        lines.append(f"AI modulok √°llapota: {'El√©rhet≈ë' if self.ai_modules_available else 'Nem el√©rhet≈ë'}")
        lines.append("")
        
        # √ñsszes√≠t√©s
        total_demos = len(self.demo_results)
        successful_demos = sum(1 for r in self.demo_results.values() if r["success"])
        failed_demos = total_demos - successful_demos
        
        if total_demos > 0:
            avg_score = sum(r.get("score", 0) for r in self.demo_results.values()) / total_demos
            success_rate = successful_demos / total_demos * 100
        else:
            avg_score = 0
            success_rate = 0
        
        lines.append("√ñSSZES√çT≈ê STATISZTIK√ÅK:")
        lines.append("-" * 40)
        lines.append(f"  √ñsszes tanp√©lda futtat√°s: {total_demos}")
        lines.append(f"  Sikeres futtat√°sok: {successful_demos}")
        lines.append(f"  Sikertelen futtat√°sok: {failed_demos}")
        lines.append(f"  Sikeress√©gi ar√°ny: {success_rate:.1f}%")
        lines.append(f"  √Åtlagos pontsz√°m: {avg_score:.1f}%")
        lines.append("")
        
        # Kateg√≥ri√°k szerinti bont√°s
        categories = {}
        for result in self.demo_results.values():
            category = result.get("category_display", result["category"])
            if category not in categories:
                categories[category] = {"total": 0, "successful": 0, "scores": []}
            
            categories[category]["total"] += 1
            if result["success"]:
                categories[category]["successful"] += 1
                categories[category]["scores"].append(result.get("score", 0))
        
        lines.append("KATEG√ìRI√ÅK SZERINTI BONT√ÅS:")
        lines.append("-" * 40)
        for category, stats in categories.items():
            success_rate = stats["successful"] / stats["total"] * 100 if stats["total"] > 0 else 0
            avg_score = sum(stats["scores"]) / len(stats["scores"]) if stats["scores"] else 0
            
            lines.append(f"  {category}:")
            lines.append(f"    Futtat√°sok: {stats['total']}")
            lines.append(f"    Sikeress√©g: {success_rate:.1f}%")
            lines.append(f"    √Åtlagos pontsz√°m: {avg_score:.1f}%")
            lines.append("")
        
        # R√©szletes eredm√©nyek
        lines.append("R√âSZLETES EREDM√âNYEK:")
        lines.append("-" * 40)
        
        sorted_results = sorted(
            self.demo_results.items(),
            key=lambda x: x[1]["timestamp"],
            reverse=True
        )
        
        for result_key, result in sorted_results:
            lines.append(f"Futtat√°s ID: {result_key}")
            lines.append(f"  Kateg√≥ria: {result.get('category_display', result['category'])}")
            lines.append(f"  D√°tum: {result['timestamp']}")
            lines.append(f"  Id≈ëtartam: {result['duration']}")
            lines.append(f"  √Ållapot: {'Sikeres' if result['success'] else 'Sikertelen'}")
            lines.append(f"  Pontsz√°m: {result.get('score', 0)}%")
            
            if result['success'] and 'details' in result:
                details = result['details']
                if 'message' in details:
                    lines.append(f"  √úzenet: {details['message']}")
            elif not result['success'] and 'details' in result:
                lines.append(f"  Hiba: {result['details'].get('error', 'Ismeretlen hiba')}")
            
            lines.append("")
        
        lines.append("=" * 80)
        lines.append("Jelent√©s v√©ge")
        
        return "\n".join(lines)
    
    def clear_selected_result(self):
        """T√∂rli a kiv√°lasztott eredm√©nyt"""
        selection = self.results_tree.selection()
        if not selection:
            messagebox.showinfo("Inform√°ci√≥", "V√°lassz ki egy eredm√©nyt a t√∂rl√©shez!")
            return
        
        if messagebox.askyesno("Meger≈ës√≠t√©s", "Biztosan t√∂r√∂lni szeretn√©d ezt az eredm√©nyt?"):
            item = self.results_tree.item(selection[0])
            values = item['values']
            
            if len(values) >= 2:
                category_display = values[1]
                timestamp = values[0]
                
                # Eredm√©ny keres√©se √©s t√∂rl√©se
                to_delete = None
                for result_key, result in self.demo_results.items():
                    if (result.get("category_display", result["category"]) == category_display and 
                        result["timestamp"][:19].replace("T", " ") == timestamp):
                        to_delete = result_key
                        break
                
                if to_delete:
                    del self.demo_results[to_delete]
                    self.load_results()
                    self.update_metrics()
                    
                    # R√©szletek t√∂rl√©se
                    self.details_text.config(state='normal')
                    self.details_text.delete(1.0, tk.END)
                    self.details_text.config(state='disabled')
    
    def clear_results(self):
        """T√∂rli az √∂sszes eredm√©nyt"""
        if not self.demo_results:
            messagebox.showinfo("Inform√°ci√≥", "Nincsenek t√∂rlend≈ë eredm√©nyek!")
            return
        
        if messagebox.askyesno("Meger≈ës√≠t√©s", "Biztosan t√∂r√∂lni szeretn√©d az √∂sszes eredm√©nyt?"):
            self.demo_results.clear()
            self.load_results()
            self.update_metrics()
            
            # R√©szletek t√∂rl√©se
            self.details_text.config(state='normal')
            self.details_text.delete(1.0, tk.END)
            self.details_text.config(state='disabled')
            
            app_logger.info("√ñsszes eredm√©ny t√∂r√∂lve")
    
    def export_results(self):
        """Export√°lja az eredm√©nyeket (√°ltal√°nos)"""
        if not self.demo_results:
            messagebox.showinfo("Inform√°ci√≥", "Nincsenek export√°lhat√≥ eredm√©nyek!")
            return
        
        # Export form√°tum v√°laszt√≥
        format_window = tk.Toplevel(self.frame)
        format_window.title("Export Form√°tum")
        format_window.geometry("300x200")
        format_window.transient(self.frame)
        format_window.grab_set()
        
        ttk.Label(format_window, text="V√°lassz export form√°tumot:", font=('Arial', 12)).pack(pady=20)
        
        format_var = tk.StringVar(value="json")
        
        ttk.Radiobutton(format_window, text="JSON", variable=format_var, value="json").pack(pady=5)
        ttk.Radiobutton(format_window, text="TXT riport", variable=format_var, value="txt").pack(pady=5)
        
        buttons_frame = ttk.Frame(format_window)
        buttons_frame.pack(pady=20)
        
        def do_export():
            if format_var.get() == "json":
                format_window.destroy()
                self.export_results_json()
            else:
                format_window.destroy()
                self.generate_results_report()
        
        ttk.Button(buttons_frame, text="Export", command=do_export).pack(side='left', padx=10)
        ttk.Button(buttons_frame, text="M√©gse", command=format_window.destroy).pack(side='left', padx=10)
    
    def generate_performance_report(self):
        """Teljes√≠tm√©ny riport gener√°l√°sa"""
        try:
            report_lines = []
            report_lines.append("TELJES√çTM√âNY RIPORT")
            report_lines.append("=" * 50)
            report_lines.append(f"Gener√°lva: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            report_lines.append("")
            
            # Rendszer inform√°ci√≥k
            report_lines.append("RENDSZER INFORM√ÅCI√ìK:")
            report_lines.append(f"AI modulok: {'El√©rhet≈ë' if self.ai_modules_available else 'Nem el√©rhet≈ë'}")
            report_lines.append(f"Dashboard: {'Fut' if self._check_dashboard_status() else 'Nem fut'}")
            report_lines.append(f"WebApp: {'Fut' if self._check_webapp_status() else 'Nem fut'}")
            report_lines.append("")
            
            # Teljes√≠tm√©ny statisztik√°k
            if self.demo_results:
                total_runs = len(self.demo_results)
                successful_runs = sum(1 for r in self.demo_results.values() if r.get("success", False))
                success_rate = (successful_runs / total_runs * 100) if total_runs > 0 else 0
                
                times = []
                for r in self.demo_results.values():
                    try:
                        time_str = r.get("duration", "0s").replace("s", "")
                        times.append(float(time_str))
                    except ValueError:
                        pass
                
                avg_time = sum(times) / len(times) if times else 0
                min_time = min(times) if times else 0
                max_time = max(times) if times else 0
                
                report_lines.append("TELJES√çTM√âNY STATISZTIK√ÅK:")
                report_lines.append(f"√ñsszes futtat√°s: {total_runs}")
                report_lines.append(f"Sikeress√©g: {success_rate:.1f}%")
                report_lines.append(f"√Åtlagos id≈ë: {avg_time:.2f}s")
                report_lines.append(f"Leggyorsabb: {min_time:.2f}s")
                report_lines.append(f"Leglassabb: {max_time:.2f}s")
            else:
                report_lines.append("TELJES√çTM√âNY STATISZTIK√ÅK:")
                report_lines.append("Nincsenek el√©rhet≈ë adatok")
            
            report_lines.append("")
            report_lines.append("Riport v√©ge")
            
            # Megjelen√≠t√©s popup ablakban
            report_window = tk.Toplevel(self.frame)
            report_window.title("Teljes√≠tm√©ny Riport")
            report_window.geometry("500x400")
            report_window.transient(self.frame)
            
            text_widget = scrolledtext.ScrolledText(
                report_window,
                wrap=tk.WORD,
                font=('Consolas', 10)
            )
            text_widget.pack(fill='both', expand=True, padx=10, pady=10)
            
            text_widget.insert(tk.END, "\n".join(report_lines))
            text_widget.config(state='disabled')
            
            ttk.Button(report_window, text="Bez√°r√°s", command=report_window.destroy).pack(pady=10)
            
        except Exception as e:
            messagebox.showerror("Hiba", f"Riport gener√°l√°sa sikertelen:\n{str(e)}")
    
    # Be√°ll√≠t√°sok kezel√©se
    def show_settings(self):
        """Megjelen√≠ti a be√°ll√≠t√°sok ablakot"""
        settings_window = tk.Toplevel(self.frame)
        settings_window.title("Be√°ll√≠t√°sok")
        settings_window.geometry("400x300")
        settings_window.transient(self.frame)
        settings_window.grab_set()
        
        # Be√°ll√≠t√°sok frame
        settings_frame = ttk.LabelFrame(settings_window, text="√Åltal√°nos Be√°ll√≠t√°sok", padding=10)
        settings_frame.pack(fill='x', padx=10, pady=10)
        
        # Be√°ll√≠t√°si v√°ltoz√≥k
        auto_refresh_var = tk.BooleanVar(value=self.settings.get("auto_refresh", True))
        real_time_var = tk.BooleanVar(value=self.settings.get("real_time_monitoring", True))
        detailed_logging_var = tk.BooleanVar(value=self.settings.get("detailed_logging", False))
        
        export_format_var = tk.StringVar(value=self.settings.get("export_format", "json"))
        
        # Checkboxok
        ttk.Checkbutton(
            settings_frame,
            text="Automatikus friss√≠t√©s",
            variable=auto_refresh_var
        ).pack(anchor='w', pady=2)
        
        ttk.Checkbutton(
            settings_frame,
            text="Val√≥s idej≈± monitoring",
            variable=real_time_var
        ).pack(anchor='w', pady=2)
        
        ttk.Checkbutton(
            settings_frame,
            text="R√©szletes napl√≥z√°s",
            variable=detailed_logging_var
        ).pack(anchor='w', pady=2)
        
        # Export form√°tum
        format_frame = ttk.Frame(settings_frame)
        format_frame.pack(fill='x', pady=10)
        
        ttk.Label(format_frame, text="Alap√©rtelmezett export form√°tum:").pack(anchor='w')
        
        format_combo = ttk.Combobox(
            format_frame,
            textvariable=export_format_var,
            values=["json", "txt", "html"],
            state="readonly"
        )
        format_combo.pack(anchor='w', pady=5)
        
        # Gombok
        buttons_frame = ttk.Frame(settings_window)
        buttons_frame.pack(fill='x', padx=10, pady=10)
        
        def save_settings():
            self.settings.update({
                "auto_refresh": auto_refresh_var.get(),
                "real_time_monitoring": real_time_var.get(),
                "detailed_logging": detailed_logging_var.get(),
                "export_format": export_format_var.get()
            })
            self.save_settings()
            settings_window.destroy()
            messagebox.showinfo("Siker", "Be√°ll√≠t√°sok mentve!")
        
        def reset_settings():
            if messagebox.askyesno("Meger≈ës√≠t√©s", "Vissza szeretn√©d √°ll√≠tani az alap√©rtelmezett be√°ll√≠t√°sokat?"):
                auto_refresh_var.set(True)
                real_time_var.set(True)
                detailed_logging_var.set(False)
                export_format_var.set("json")
        
        ttk.Button(buttons_frame, text="Ment√©s", command=save_settings).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="Alap√©rtelmezett", command=reset_settings).pack(side='left', padx=5)
        ttk.Button(buttons_frame, text="M√©gse", command=settings_window.destroy).pack(side='left', padx=5)
    
    def load_settings(self):
        """Bet√∂lti a be√°ll√≠t√°sokat"""
        try:
            settings_file = Path(__file__).parent.parent / "settings" / "examples_menu_settings.json"
            if settings_file.exists():
                with open(settings_file, 'r', encoding='utf-8') as f:
                    saved_settings = json.load(f)
                    self.settings.update(saved_settings)
        except Exception as e:
            app_logger.warning(f"Be√°ll√≠t√°sok bet√∂lt√©si hiba: {str(e)}")
    
    def save_settings(self):
        """Menti a be√°ll√≠t√°sokat"""
        try:
            settings_dir = Path(__file__).parent.parent / "settings"
            settings_dir.mkdir(exist_ok=True)
            
            settings_file = settings_dir / "examples_menu_settings.json"
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, indent=2, ensure_ascii=False)
        except Exception as e:
            app_logger.error(f"Be√°ll√≠t√°sok ment√©si hiba: {str(e)}")
    
    def on_settings_changed(self):
        """Be√°ll√≠t√°sok v√°ltoz√°sakor h√≠v√≥dik meg"""
        # Be√°ll√≠t√°sok friss√≠t√©se a v√°ltoz√≥kb√≥l
        if hasattr(self, 'auto_refresh_var'):
            self.settings["auto_refresh"] = self.auto_refresh_var.get()
        if hasattr(self, 'real_time_var'):
            self.settings["real_time_monitoring"] = self.real_time_var.get()
        if hasattr(self, 'detailed_logging_var'):
            self.settings["detailed_logging"] = self.detailed_logging_var.get()
        
        # Be√°ll√≠t√°sok ment√©se
        self.save_settings()
    
    def cleanup(self):
        """Tiszt√≠tja fel az er≈ëforr√°sokat"""
        try:
            # Dashboard le√°ll√≠t√°sa
            if self.dashboard_process:
                self.stop_dashboard()
            
            # WebApp le√°ll√≠t√°sa
            if self.webapp_process:
                self.stop_webapp()
            
            # Demo thread le√°ll√≠t√°sa
            if hasattr(self, 'demo_thread') and self.demo_thread.is_alive():
                self.demo_running = False
                self.demo_thread.join(timeout=1)
            
            # Be√°ll√≠t√°sok ment√©se
            self.save_settings()
            
            app_logger.info("K√©sz Tanp√©ld√°k men√º tab tiszt√≠tva")
            
        except Exception as e:
            app_logger.error(f"Cleanup hiba: {str(e)}")