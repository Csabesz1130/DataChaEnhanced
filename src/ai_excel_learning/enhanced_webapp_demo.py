#!/usr/bin/env python3
"""
Enhanced AI Excel Learning WebApp Demo

Ez a tov√°bbfejlesztett Streamlit alap√∫ webalkalmaz√°s biztos√≠tja a k√©sz tanp√©ld√°khoz √©s 
az AI Excel Learning dashboard integr√°ci√≥j√°hoz val√≥ hozz√°f√©r√©st. A rendszer teljes 
m√©rt√©kben kompatibilis a desktop GUI verzi√≥val √©s azonos funkcionalit√°st ny√∫jt.

Funkci√≥k:
- üìö Interakt√≠v k√©sz tanp√©ld√°k kateg√≥ri√°kba rendezve
- üìä AI Dashboard integr√°ci√≥ k√ºl√∂n oldalk√©nt
- üîß Fejlett monitoring √©s riportol√°s
- üìã Eredm√©nyek export√°l√°sa √©s megoszt√°sa
- ‚öôÔ∏è Testreszabhat√≥ be√°ll√≠t√°sok
- üîÑ Val√≥s idej≈± szinkroniz√°ci√≥ a desktop verzi√≥val
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import time
import os
import subprocess
import sys
import webbrowser
from pathlib import Path
from typing import Dict, List, Any, Optional
import threading
import requests

# AI Excel Learning modulok import√°l√°sa
try:
    from .excel_analyzer import ExcelAnalyzer
    from .chart_learner import ChartLearner
    from .formula_learner import FormulaLearner
    from .ml_models import ExcelMLModels
    from .learning_pipeline import LearningPipeline
    from .data_generator import DataGenerator
    from .excel_generator import ExcelGenerator
    from .ai_monitor import get_ai_monitor
    AI_MODULES_AVAILABLE = True
except ImportError as e:
    st.warning(f"AI modulok nem el√©rhet≈ëk: {e}")
    AI_MODULES_AVAILABLE = False

# Oldal konfigur√°ci√≥
st.set_page_config(
    page_title="AI Excel Learning - K√©sz Tanp√©ld√°k & Dashboard",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Session state inicializ√°l√°sa
if 'demo_results' not in st.session_state:
    st.session_state.demo_results = {}

if 'demo_running' not in st.session_state:
    st.session_state.demo_running = False

if 'dashboard_process' not in st.session_state:
    st.session_state.dashboard_process = None

if 'current_page' not in st.session_state:
    st.session_state.current_page = "examples"

if 'settings' not in st.session_state:
    st.session_state.settings = {
        "auto_refresh": True,
        "real_time_monitoring": True,
        "detailed_logging": False,
        "export_format": "json"
    }

# Egyedi CSS st√≠lus
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #2E86AB, #A23B72);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #2E86AB;
        margin: 0.5rem 0;
    }
    
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    .error-box {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    .info-box {
        background: #cce7ff;
        border: 1px solid #99d6ff;
        color: #004085;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def get_example_categories():
    """Visszaadja a tanp√©lda kateg√≥ri√°kat"""
    return {
        "üî∞ Alapvet≈ë Excel elemz√©s": "basic",
        "üìà Grafikonok tan√≠t√°sa": "charts", 
        "üßÆ K√©pletek tan√≠t√°sa": "formulas",
        "ü§ñ ML modellek": "ml_models",
        "üîÑ Teljes tanul√°si folyamat": "pipeline",
        "üöÄ Halad√≥ funkci√≥k": "advanced"
    }

def get_example_descriptions():
    """Visszaadja a tanp√©lda le√≠r√°sokat"""
    return {
        "basic": {
            "title": "üî∞ Alapvet≈ë Excel elemz√©s",
            "description": """Ez a tanp√©lda bemutatja az Excel f√°jlok alapvet≈ë elemz√©s√©t √©s strukt√∫ra 
            felismer√©s√©t. T√∂k√©letes kezd≈ëknek √©s az AI rendszer megismer√©s√©hez.""",
            "features": [
                "Excel f√°jl strukt√∫ra automatikus felismer√©se",
                "Adatok t√≠pus√°nak √©s form√°tum√°nak elemz√©se",
                "Oszlopok √©s sorok kapcsolatainak felder√≠t√©se",
                "Egyszer≈± statisztik√°k √©s √∂sszefoglal√≥k gener√°l√°sa",
                "Adatmin≈ës√©g ellen≈ërz√©s √©s valid√°ci√≥"
            ],
            "duration": "2-3 perc",
            "difficulty": "Kezd≈ë",
            "expected_score": "85-95%"
        },
        "charts": {
            "title": "üìà Grafikonok tan√≠t√°sa",
            "description": """Ez a tanp√©lda a grafikonok √©s vizualiz√°ci√≥k mesters√©ges intelligencia 
            alap√∫ tan√≠t√°s√°t √©s gener√°l√°s√°t mutatja be.""",
            "features": [
                "Excel grafikonok t√≠pus√°nak automatikus felismer√©se",
                "Adatok √©s grafikonok k√∂z√∂tti kapcsolatok elemz√©se",
                "Grafikon st√≠lusok, sz√≠nek √©s form√°z√°sok tan√≠t√°sa",
                "√öj grafikonok intelligens gener√°l√°sa",
                "Vizualiz√°ci√≥s best practice-ek alkalmaz√°sa"
            ],
            "duration": "3-4 perc",
            "difficulty": "K√∂zepes",
            "expected_score": "78-88%"
        },
        "formulas": {
            "title": "üßÆ K√©pletek tan√≠t√°sa",
            "description": """Ez a tanp√©lda az Excel k√©pletek √©s f√ºggv√©nyek mesters√©ges intelligencia
            alap√∫ tan√≠t√°s√°t √©s gener√°l√°s√°t mutatja be.""",
            "features": [
                "Excel k√©pletek mint√°zatainak felismer√©se",
                "Matematikai √©s logikai kapcsolatok tan√≠t√°sa",
                "K√©plet f√ºgg≈ës√©gek √©s referenci√°k elemz√©se",
                "√öj k√©pletek intelligens gener√°l√°sa",
                "Komplex sz√°m√≠t√°sok optimaliz√°l√°sa"
            ],
            "duration": "2-3 perc",
            "difficulty": "K√∂zepes",
            "expected_score": "80-90%"
        },
        "ml_models": {
            "title": "ü§ñ G√©pi tanul√°si modellek",
            "description": """Ez a tanp√©lda a g√©pi tanul√°si modellek Excel adatokon val√≥ alkalmaz√°s√°t
            √©s teljes√≠tm√©nymonitoroz√°s√°t mutatja be.""",
            "features": [
                "ML modellek Excel adatokra t√∂rt√©n≈ë alkalmaz√°sa",
                "Predikt√≠v elemz√©s √©s trend felismer√©s",
                "Anom√°lia detekt√°l√°s √©s kiv√©telkezel√©s",
                "Modellek teljes√≠tm√©ny√©nek monitoroz√°sa",
                "Automatikus model optimaliz√°l√°s"
            ],
            "duration": "4-5 perc",
            "difficulty": "Halad√≥",
            "expected_score": "88-96%"
        },
        "pipeline": {
            "title": "üîÑ Teljes tanul√°si folyamat",
            "description": """Ez a tanp√©lda a komplett end-to-end AI Excel Learning pipeline-t
            mutatja be, minden f≈ë komponenssel.""",
            "features": [
                "Teljes automatikus adatfeldolgoz√°si folyamat",
                "Integr√°lt elemz√©s, tan√≠t√°s √©s gener√°l√°s",
                "Folyamatos tanul√°s √©s √∂nfejleszt√©s",
                "Teljes√≠tm√©ny optimaliz√°l√°s √©s sk√°l√°z√°s",
                "Production-ready AI rendszer m≈±k√∂d√©se"
            ],
            "duration": "5-6 perc",
            "difficulty": "Halad√≥",
            "expected_score": "90-98%"
        },
        "advanced": {
            "title": "üöÄ Halad√≥ funkci√≥k",
            "description": """Ez a tanp√©lda a legfejlettebb AI Excel Learning funkci√≥kat √©s
            enterprise-szint≈± k√©pess√©geket mutatja be.""",
            "features": [
                "Komplex Excel munkaf√ºzetek teljes elemz√©se",
                "T√∂bb munkalap k√∂z√∂tti √∂sszetett kapcsolatok",
                "Makr√≥k √©s VBA k√≥d automatikus elemz√©se",
                "Automatikus dokument√°ci√≥ √©s riport gener√°l√°s",
                "Enterprise integr√°ci√≥ √©s sk√°l√°zhat√≥s√°g"
            ],
            "duration": "3-4 perc",
            "difficulty": "Szak√©rt≈ë",
            "expected_score": "92-99%"
        }
    }

def check_ai_modules():
    """Ellen≈ërzi az AI modulok el√©rhet≈ës√©g√©t"""
    return AI_MODULES_AVAILABLE

def check_dashboard_status():
    """Ellen≈ërzi a dashboard √°llapot√°t"""
    try:
        response = requests.get("http://localhost:8501", timeout=2)
        return response.status_code == 200
    except:
        return False

def check_desktop_app_status():
    """Ellen≈ërzi a desktop alkalmaz√°s √°llapot√°t"""
    # Itt lehetne kommunik√°lni a desktop applik√°ci√≥val
    # P√©ld√°ul egy shared file vagy API kereszt√ºl
    return True  # Placeholder

def main():
    """F≈ë oldal megjelen√≠t√©se"""
    # Fejl√©c
    st.markdown("""
    <div class="main-header">
        <h1>üéØ AI Excel Learning - K√©sz Tanp√©ld√°k & Dashboard</h1>
        <p>Ismerd meg a rendszer k√©pess√©geit √©s teszteld interakt√≠van</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar navig√°ci√≥
    with st.sidebar:
        st.header("üéØ Navig√°ci√≥")
        
        page = st.selectbox(
            "V√°lassz oldalt:",
            ["üè† F≈ëoldal", "üìö K√©sz Tanp√©ld√°k", "üìä AI Dashboard", "üîß Tesztel√©s", "üìã Eredm√©nyek", "‚öôÔ∏è Be√°ll√≠t√°sok"],
            key="page_selector"
        )
        
        st.markdown("---")
        st.header("üìä Rendszer √Ållapot")
        
        # AI modulok √°llapota
        ai_status = "‚úÖ El√©rhet≈ë" if check_ai_modules() else "‚ùå Nem el√©rhet≈ë"
        st.write(f"**AI Modulok:** {ai_status}")
        
        # Dashboard √°llapot
        dashboard_status = "‚úÖ Fut" if check_dashboard_status() else "‚ùå Nem fut"
        st.write(f"**AI Dashboard:** {dashboard_status}")
        
        # Desktop app √°llapot
        desktop_status = "‚úÖ Akt√≠v" if check_desktop_app_status() else "‚ùå Inakt√≠v"
        st.write(f"**Desktop App:** {desktop_status}")
        
        st.markdown("---")
        st.header("‚öôÔ∏è Gyors Be√°ll√≠t√°sok")
        
        # Automatikus friss√≠t√©s
        auto_refresh = st.checkbox("üîÑ Automatikus friss√≠t√©s", 
                                 value=st.session_state.settings["auto_refresh"])
        if auto_refresh != st.session_state.settings["auto_refresh"]:
            st.session_state.settings["auto_refresh"] = auto_refresh
        
        # Friss√≠t√©si gyakoris√°g
        if auto_refresh:
            refresh_interval = st.slider("Friss√≠t√©si gyakoris√°g (mp)", 5, 60, 15)
            st.session_state.refresh_interval = refresh_interval
        
        # Val√≥s idej≈± monitoring
        real_time = st.checkbox("‚è±Ô∏è Val√≥s idej≈± monitoring", 
                               value=st.session_state.settings["real_time_monitoring"])
        if real_time != st.session_state.settings["real_time_monitoring"]:
            st.session_state.settings["real_time_monitoring"] = real_time
    
    # Oldal tartalom megjelen√≠t√©se
    if page == "üè† F≈ëoldal":
        show_home_page()
    elif page == "üìö K√©sz Tanp√©ld√°k":
        show_examples_page()
    elif page == "üìä AI Dashboard":
        show_dashboard_page()
    elif page == "üîß Tesztel√©s":
        show_testing_page()
    elif page == "üìã Eredm√©nyek":
        show_results_page()
    elif page == "‚öôÔ∏è Be√°ll√≠t√°sok":
        show_settings_page()

def show_home_page():
    """F≈ëoldal megjelen√≠t√©se"""
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üöÄ Mi ez a rendszer?")
        st.markdown("""
        A **DataChaEnhanced AI Excel Learning** egy mesters√©ges intelligencia alap√∫ rendszer,
        amely k√©pes Excel f√°jlokat elemzeni, tanulni bel≈ël√ºk, √©s √∫j f√°jlokat gener√°lni
        a tanult mint√°k alapj√°n.
        
        **F≈ëbb k√©pess√©gek:**
        - üìä **Excel elemz√©s**: Automatikus strukt√∫ra felismer√©s
        - üìà **Grafikon tan√≠t√°s**: Chart mint√°k tan√≠t√°sa √©s gener√°l√°sa
        - üßÆ **K√©plet tan√≠t√°s**: Matematikai √©s logikai kapcsolatok
        - ü§ñ **ML modellek**: G√©pi tanul√°si algoritmusok
        - üîÑ **Folyamatos tanul√°s**: Automatikus fejleszt√©s
        """)
        
        st.header("üéØ Mire haszn√°lhat√≥?")
        st.markdown("""
        - **Adatelemz√©s**: Nagy mennyis√©g≈± Excel adat automatikus feldolgoz√°sa
        - **Jelent√©s gener√°l√°s**: Automatikus Excel jelent√©sek k√©sz√≠t√©se
        - **Mint√°zat felismer√©s**: Rejtett kapcsolatok √©s trendek felfedez√©se
        - **Min≈ës√©gbiztos√≠t√°s**: Adatok konzisztenci√°j√°nak ellen≈ërz√©se
        - **Automatiz√°l√°s**: Ism√©tl≈ëd≈ë feladatok automatiz√°l√°sa
        """)
    
    with col2:
        st.header("üìä Rendszer Statisztik√°k")
        
        # Statisztika k√°rty√°k
        col2_1, col2_2 = st.columns(2)
        
        with col2_1:
            st.metric("Akt√≠v Modulok", 
                     5 if check_ai_modules() else 0, 
                     "mind el√©rhet≈ë" if check_ai_modules() else "nem el√©rhet≈ë")
        
        with col2_2:
            st.metric("Futtatott Tanp√©ld√°k", 
                     len(st.session_state.demo_results))
        
        # Sikeress√©gi ar√°ny
        if st.session_state.demo_results:
            successful = sum(1 for r in st.session_state.demo_results.values() if r.get("success", False))
            success_rate = (successful / len(st.session_state.demo_results)) * 100
            st.metric("Sikeress√©gi Ar√°ny", f"{success_rate:.1f}%")
        else:
            st.metric("Sikeress√©gi Ar√°ny", "0%")
        
        # Legut√≥bbi aktivit√°s
        if st.session_state.demo_results:
            latest = max(st.session_state.demo_results.values(), 
                        key=lambda x: x.get("timestamp", ""))
            st.write(f"**Legut√≥bbi aktivit√°s:**")
            st.write(f"{latest.get('category_display', 'N/A')}")
            st.write(f"{latest.get('timestamp', '')[:19]}")
    
    # K√∂zponti akci√≥ gombok
    st.markdown("---")
    st.header("üéØ Kezdj el haszn√°lni a rendszert!")
    
    col3, col4, col5 = st.columns(3)
    
    with col3:
        if st.button("üìö N√©zd meg a tanp√©ld√°kat", use_container_width=True, type="primary"):
            st.session_state.current_page = "examples"
            st.rerun()
    
    with col4:
        if st.button("üìä Ind√≠tsd el a dashboard-ot", use_container_width=True):
            st.session_state.current_page = "dashboard"
            st.rerun()
    
    with col5:
        if st.button("üîß Teszteld a funkci√≥kat", use_container_width=True):
            st.session_state.current_page = "testing"
            st.rerun()

def show_examples_page():
    """K√©sz tanp√©ld√°k oldal megjelen√≠t√©se"""
    st.header("üìö K√©sz Tanp√©ld√°k")
    st.markdown("---")
    
    # Kateg√≥ria v√°laszt√≥ √©s le√≠r√°s
    col1, col2 = st.columns([1, 2])
    
    with col1:
        categories = get_example_categories()
        selected_category = st.selectbox(
            "V√°lassz kateg√≥ri√°t:",
            list(categories.keys()),
            key="category_selector"
        )
        
        category_id = categories[selected_category]
        descriptions = get_example_descriptions()
        category_info = descriptions.get(category_id, {})
        
        # Kateg√≥ria r√©szletek
        st.markdown("### üìñ Kateg√≥ria Inform√°ci√≥k")
        st.markdown(f"**Id≈ëtartam:** {category_info.get('duration', 'N/A')}")
        st.markdown(f"**Neh√©zs√©g:** {category_info.get('difficulty', 'N/A')}")
        st.markdown(f"**V√°rhat√≥ eredm√©ny:** {category_info.get('expected_score', 'N/A')}")
        
        # Futtat√°s gombok
        st.markdown("### ‚ö° Vez√©rl√©s")
        
        run_demo = st.button("‚ñ∂ Futtat√°s", 
                           use_container_width=True, 
                           type="primary",
                           disabled=st.session_state.demo_running)
        
        if run_demo:
            run_selected_demo(category_id, selected_category)
        
        if st.session_state.demo_running:
            if st.button("‚èπ Le√°ll√≠t√°s", use_container_width=True, type="secondary"):
                st.session_state.demo_running = False
                st.success("Tanp√©lda le√°ll√≠tva!")
                st.rerun()
    
    with col2:
        # Kateg√≥ria le√≠r√°s
        st.markdown("### üìã Tanp√©lda Le√≠r√°sa")
        st.markdown(category_info.get('description', 'Le√≠r√°s nem el√©rhet≈ë'))
        
        # Funkci√≥k list√°ja
        if 'features' in category_info:
            st.markdown("### üéØ Mit fogsz megtanulni:")
            for feature in category_info['features']:
                st.markdown(f"‚Ä¢ {feature}")
    
    # Demo futtat√°si √°llapot
    if st.session_state.demo_running:
        st.markdown("---")
        st.markdown("### üîÑ Tanp√©lda Fut√°sa")
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Szimul√°lt futtat√°s
        for i in range(100):
            time.sleep(0.05)  # R√∂vid v√°rakoz√°s
            progress_bar.progress(i + 1)
            status_text.text(f"Feldolgoz√°s... {i+1}%")
        
        st.session_state.demo_running = False
        st.success("Tanp√©lda sikeresen lefutott!")
        st.rerun()
    
    # Gyors statisztik√°k
    st.markdown("---")
    st.markdown("### üìä Gyors Statisztik√°k")
    
    col3, col4, col5, col6 = st.columns(4)
    
    with col3:
        st.metric("√ñsszes futtat√°s", len(st.session_state.demo_results))
    
    with col4:
        successful = sum(1 for r in st.session_state.demo_results.values() if r.get("success", False))
        st.metric("Sikeres", successful)
    
    with col5:
        failed = len(st.session_state.demo_results) - successful
        st.metric("Sikertelen", failed)
    
    with col6:
        if st.session_state.demo_results:
            avg_score = sum(r.get("score", 0) for r in st.session_state.demo_results.values()) / len(st.session_state.demo_results)
            st.metric("√Åtlagos pontsz√°m", f"{avg_score:.1f}%")
        else:
            st.metric("√Åtlagos pontsz√°m", "0%")

def run_selected_demo(category_id, category_display):
    """Futtatja a kiv√°lasztott tanp√©ld√°t"""
    st.session_state.demo_running = True
    
    # Szimul√°lt demo futtat√°s
    start_time = time.time()
    
    # Demo-specifikus logika
    demo_results = {
        "basic": {"success": True, "score": 92, "message": "Alapvet≈ë Excel elemz√©s sikeres"},
        "charts": {"success": True, "score": 84, "message": "Grafikon tan√≠t√°s sikeres"},
        "formulas": {"success": True, "score": 89, "message": "K√©plet tan√≠t√°s sikeres"},
        "ml_models": {"success": True, "score": 96, "message": "ML modellek sikeresek"},
        "pipeline": {"success": True, "score": 94, "message": "Pipeline sikeres"},
        "advanced": {"success": True, "score": 98, "message": "Halad√≥ funkci√≥k sikeresek"}
    }
    
    result = demo_results.get(category_id, {"success": False, "score": 0, "message": "Ismeretlen kateg√≥ria"})
    
    # Eredm√©ny ment√©se
    end_time = time.time()
    duration = end_time - start_time
    
    result_key = f"{category_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    st.session_state.demo_results[result_key] = {
        "category": category_id,
        "category_display": category_display,
        "timestamp": datetime.now().isoformat(),
        "duration": f"{duration:.2f}s",
        "success": result["success"],
        "score": result["score"],
        "details": result
    }

def show_dashboard_page():
    """AI Dashboard oldal megjelen√≠t√©se"""
    st.header("üìä AI Dashboard & Integr√°ci√≥")
    st.markdown("---")
    
    # Dashboard szolg√°ltat√°sok
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä AI Monitoring Dashboard")
        
        dashboard_running = check_dashboard_status()
        if dashboard_running:
            st.success("‚úÖ Dashboard fut (localhost:8501)")
            
            if st.button("üåê Megnyit√°s b√∂ng√©sz≈ëben", key="open_dashboard"):
                webbrowser.open("http://localhost:8501")
                
            if st.button("‚èπ Dashboard le√°ll√≠t√°sa", key="stop_dashboard"):
                # Itt lehetne le√°ll√≠tani a dashboard-ot
                st.info("Dashboard le√°ll√≠t√°si funkci√≥ fejleszt√©s alatt")
        else:
            st.error("‚ùå Dashboard nincs elind√≠tva")
            
            if st.button("üöÄ Dashboard ind√≠t√°sa", key="start_dashboard"):
                start_ai_dashboard()
    
    with col2:
        st.subheader("üåê WebApp Dashboard")
        
        st.info("‚úÖ WebApp fut (localhost:8502)")
        
        if st.button("üîÑ WebApp √∫jrat√∂lt√©se", key="reload_webapp"):
            st.rerun()
        
        if st.button("üì± √öj ablakban megnyit√°sa", key="open_new_window"):
            webbrowser.open("http://localhost:8502")
    
    # Integr√°ci√≥ be√°ll√≠t√°sok
    st.markdown("---")
    st.subheader("üîó Integr√°ci√≥ & Be√°ll√≠t√°sok")
    
    col3, col4 = st.columns(2)
    
    with col3:
        st.markdown("**Szinkroniz√°ci√≥:**")
        
        sync_desktop = st.checkbox("üñ•Ô∏è Desktop app szinkroniz√°ci√≥", 
                                  value=True)
        
        sync_dashboard = st.checkbox("üìä Dashboard szinkroniz√°ci√≥", 
                                    value=True)
        
        sync_realtime = st.checkbox("‚è±Ô∏è Val√≥s idej≈± friss√≠t√©s", 
                                   value=st.session_state.settings["real_time_monitoring"])
    
    with col4:
        st.markdown("**Export & Riportol√°s:**")
        
        if st.button("üì§ Eredm√©nyek export√°l√°sa", key="export_results"):
            export_results()
        
        if st.button("üìä Teljes√≠tm√©ny riport", key="performance_report"):
            show_performance_report()
        
        if st.button("üîÑ Szinkroniz√°ci√≥ most", key="sync_now"):
            st.success("Szinkroniz√°ci√≥ v√©grehajtva!")
    
    # Dashboard el≈ën√©zet (placeholder)
    st.markdown("---")
    st.subheader("üëÅÔ∏è Dashboard El≈ën√©zet")
    
    # Szimul√°lt dashboard widgetek
    col5, col6, col7 = st.columns(3)
    
    with col5:
        st.metric("Akt√≠v Modulok", "5/5", "100%")
    
    with col6:
        st.metric("CPU Haszn√°lat", "45%", "2%")
    
    with col7:
        st.metric("Mem√≥ria", "2.1GB", "0.1GB")
    
    # Egyszer≈± grafikon
    chart_data = pd.DataFrame({
        'time': pd.date_range('now', periods=10, freq='1min'),
        'cpu': [40, 42, 45, 43, 46, 44, 47, 45, 48, 45],
        'memory': [2.0, 2.1, 2.2, 2.1, 2.3, 2.2, 2.4, 2.3, 2.5, 2.4]
    })
    
    fig = px.line(chart_data, x='time', y=['cpu', 'memory'], 
                  title="Rendszer Teljes√≠tm√©ny (Utols√≥ 10 perc)")
    st.plotly_chart(fig, use_container_width=True)

def start_ai_dashboard():
    """Ind√≠tja az AI Dashboard-ot"""
    try:
        dashboard_script = Path(__file__).parent / "ai_dashboard.py"
        
        if dashboard_script.exists():
            # Dashboard ind√≠t√°sa h√°tt√©rben
            process = subprocess.Popen([
                sys.executable, "-m", "streamlit", "run", str(dashboard_script),
                "--server.port", "8501",
                "--server.headless", "true"
            ])
            
            st.session_state.dashboard_process = process
            st.success("AI Dashboard ind√≠t√°sa elkezd≈ëd√∂tt!")
            time.sleep(2)
            st.rerun()
        else:
            st.error("AI Dashboard script nem tal√°lhat√≥!")
    
    except Exception as e:
        st.error(f"Hiba a dashboard ind√≠t√°s√°ban: {str(e)}")

def show_testing_page():
    """Tesztel√©si oldal megjelen√≠t√©se"""
    st.header("üîß Tesztel√©si Eszk√∂z√∂k")
    st.markdown("---")
    
    # Gyors tesztek
    st.subheader("‚ö° Gyors Tesztek")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîç AI modulok tesztel√©se", use_container_width=True):
            test_ai_modules()
    
    with col2:
        if st.button("üìä Dashboard kapcsolat", use_container_width=True):
            test_dashboard_connection()
    
    with col3:
        if st.button("üñ•Ô∏è Desktop app st√°tusz", use_container_width=True):
            test_desktop_connection()
    
    # Teszteredm√©nyek ter√ºlete
    st.markdown("---")
    st.subheader("üìã Tesztel√©si Eredm√©nyek")
    
    if 'test_results' not in st.session_state:
        st.session_state.test_results = []
    
    # Eredm√©nyek megjelen√≠t√©se
    if st.session_state.test_results:
        for result in st.session_state.test_results[-5:]:  # Utols√≥ 5 eredm√©ny
            timestamp = result['timestamp']
            test_type = result['type']
            status = result['status']
            details = result['details']
            
            status_icon = "‚úÖ" if status == "success" else "‚ùå"
            
            with st.expander(f"{status_icon} {test_type} - {timestamp}"):
                st.code(details, language='text')
    else:
        st.info("M√©g nem futtattak teszteket. Haszn√°ld a fenti gombokat!")

def test_ai_modules():
    """Teszteli az AI modulokat"""
    test_result = {
        'timestamp': datetime.now().strftime('%H:%M:%S'),
        'type': 'AI Modulok Teszt',
        'status': 'success' if check_ai_modules() else 'error',
        'details': f"""AI MODULOK TESZTEL√âSE - {datetime.now().strftime('%H:%M:%S')}
{'='*60}

Excel Analyzer: {'‚úÖ EL√âRHET≈ê' if check_ai_modules() else '‚ùå NEM EL√âRHET≈ê'}
Chart Learner: {'‚úÖ EL√âRHET≈ê' if check_ai_modules() else '‚ùå NEM EL√âRHET≈ê'}
Formula Learner: {'‚úÖ EL√âRHET≈ê' if check_ai_modules() else '‚ùå NEM EL√âRHET≈ê'}
ML Models: {'‚úÖ EL√âRHET≈ê' if check_ai_modules() else '‚ùå NEM EL√âRHET≈ê'}
Learning Pipeline: {'‚úÖ EL√âRHET≈ê' if check_ai_modules() else '‚ùå NEM EL√âRHET≈ê'}

Teszt befejezve."""
    }
    
    st.session_state.test_results.append(test_result)
    
    if test_result['status'] == 'success':
        st.success("‚úÖ AI modulok tesztel√©se sikeres!")
    else:
        st.error("‚ùå AI modulok tesztel√©se sikertelen!")

def test_dashboard_connection():
    """Teszteli a dashboard kapcsolatot"""
    dashboard_running = check_dashboard_status()
    
    test_result = {
        'timestamp': datetime.now().strftime('%H:%M:%S'),
        'type': 'Dashboard Kapcsolat Teszt',
        'status': 'success' if dashboard_running else 'error',
        'details': f"""DASHBOARD KAPCSOLAT TESZTEL√âSE - {datetime.now().strftime('%H:%M:%S')}
{'='*60}

Dashboard folyamat: {'‚úÖ Fut' if dashboard_running else '‚ùå Nem fut'}
HTTP kapcsolat: {'‚úÖ OK (200)' if dashboard_running else '‚ùå Kapcsolat sikertelen'}
URL: http://localhost:8501

Teszt befejezve."""
    }
    
    st.session_state.test_results.append(test_result)
    
    if test_result['status'] == 'success':
        st.success("‚úÖ Dashboard kapcsolat teszt sikeres!")
    else:
        st.error("‚ùå Dashboard kapcsolat teszt sikertelen!")

def test_desktop_connection():
    """Teszteli a desktop alkalmaz√°s kapcsolatot"""
    desktop_status = check_desktop_app_status()
    
    test_result = {
        'timestamp': datetime.now().strftime('%H:%M:%S'),
        'type': 'Desktop App Kapcsolat Teszt',
        'status': 'success' if desktop_status else 'error',
        'details': f"""DESKTOP APP KAPCSOLAT TESZTEL√âSE - {datetime.now().strftime('%H:%M:%S')}
{'='*60}

Desktop alkalmaz√°s: {'‚úÖ Akt√≠v' if desktop_status else '‚ùå Nem el√©rhet≈ë'}
Kommunik√°ci√≥s csatorna: {'‚úÖ M≈±k√∂dik' if desktop_status else '‚ùå Hib√°s'}
Szinkroniz√°ci√≥: {'‚úÖ El√©rhet≈ë' if desktop_status else '‚ùå Nem el√©rhet≈ë'}

Teszt befejezve."""
    }
    
    st.session_state.test_results.append(test_result)
    
    if test_result['status'] == 'success':
        st.success("‚úÖ Desktop app kapcsolat teszt sikeres!")
    else:
        st.error("‚ùå Desktop app kapcsolat teszt sikertelen!")

def show_results_page():
    """Eredm√©nyek oldal megjelen√≠t√©se"""
    st.header("üìã Eredm√©nyek & Riportok")
    st.markdown("---")
    
    if not st.session_state.demo_results:
        st.info("M√©g nincsenek futtatott tanp√©ld√°k. Menj a 'K√©sz Tanp√©ld√°k' oldalra √©s futtass egy tanp√©ld√°t!")
        return
    
    # √ñsszes√≠t≈ë statisztik√°k
    st.subheader("üìä √ñsszes√≠t≈ë Statisztik√°k")
    
    total_runs = len(st.session_state.demo_results)
    successful_runs = sum(1 for r in st.session_state.demo_results.values() if r.get("success", False))
    failed_runs = total_runs - successful_runs
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("√ñsszes Futtat√°s", total_runs)
    
    with col2:
        st.metric("Sikeres", successful_runs)
    
    with col3:
        st.metric("Sikertelen", failed_runs)
    
    with col4:
        success_rate = (successful_runs / total_runs * 100) if total_runs > 0 else 0
        st.metric("Sikeress√©gi Ar√°ny", f"{success_rate:.1f}%")
    
    # Eredm√©nyek t√°bl√°zata
    st.markdown("---")
    st.subheader("üìã R√©szletes Eredm√©nyek")
    
    # DataFrame l√©trehoz√°sa
    results_data = []
    for key, result in st.session_state.demo_results.items():
        results_data.append({
            "D√°tum": result.get("timestamp", "")[:19].replace("T", " "),
            "Kateg√≥ria": result.get("category_display", result.get("category", "")),
            "√Ållapot": "‚úÖ Sikeres" if result.get("success", False) else "‚ùå Sikertelen",
            "Pontsz√°m": f"{result.get('score', 0)}%",
            "Id≈ëtartam": result.get("duration", ""),
            "R√©szletek": result.get("details", {}).get("message", "")
        })
    
    if results_data:
        df = pd.DataFrame(results_data)
        
        # Sz≈±r√©si opci√≥k
        col5, col6 = st.columns(2)
        
        with col5:
            status_filter = st.selectbox("Sz≈±r√©s √°llapot szerint:", 
                                       ["√ñsszes", "‚úÖ Sikeres", "‚ùå Sikertelen"])
        
        with col6:
            category_filter = st.selectbox("Sz≈±r√©s kateg√≥ria szerint:",
                                         ["√ñsszes"] + list(df["Kateg√≥ria"].unique()))
        
        # Sz≈±r√©s alkalmaz√°sa
        filtered_df = df.copy()
        
        if status_filter != "√ñsszes":
            filtered_df = filtered_df[filtered_df["√Ållapot"] == status_filter]
        
        if category_filter != "√ñsszes":
            filtered_df = filtered_df[filtered_df["Kateg√≥ria"] == category_filter]
        
        # T√°bl√°zat megjelen√≠t√©se
        st.dataframe(filtered_df, use_container_width=True)
        
        # Export gombok
        st.markdown("---")
        st.subheader("üì§ Export Opci√≥k")
        
        col7, col8, col9 = st.columns(3)
        
        with col7:
            if st.button("üìä JSON Export", use_container_width=True):
                export_results_json()
        
        with col8:
            if st.button("üìã CSV Export", use_container_width=True):
                export_results_csv(filtered_df)
        
        with col9:
            if st.button("üìÑ Riport Gener√°l√°s", use_container_width=True):
                generate_detailed_report()

def export_results():
    """√Åltal√°nos eredm√©ny export√°l√°s"""
    if not st.session_state.demo_results:
        st.warning("Nincsenek export√°lhat√≥ eredm√©nyek!")
        return
    
    export_format = st.session_state.settings.get("export_format", "json")
    
    if export_format == "json":
        export_results_json()
    else:
        generate_detailed_report()

def export_results_json():
    """JSON form√°tumban export√°lja az eredm√©nyeket"""
    if not st.session_state.demo_results:
        st.warning("Nincsenek export√°lhat√≥ eredm√©nyek!")
        return
    
    # JSON string l√©trehoz√°sa
    json_data = json.dumps(st.session_state.demo_results, indent=2, ensure_ascii=False)
    
    # Download gomb
    st.download_button(
        label="üíæ JSON Let√∂lt√©se",
        data=json_data,
        file_name=f"ai_excel_learning_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        mime="application/json"
    )
    
    st.success("JSON export k√©sz! Kattints a let√∂lt√©s gombra.")

def export_results_csv(df):
    """CSV form√°tumban export√°lja az eredm√©nyeket"""
    csv_data = df.to_csv(index=False, encoding='utf-8')
    
    st.download_button(
        label="üíæ CSV Let√∂lt√©se",
        data=csv_data,
        file_name=f"ai_excel_learning_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
        mime="text/csv"
    )
    
    st.success("CSV export k√©sz! Kattints a let√∂lt√©s gombra.")

def generate_detailed_report():
    """R√©szletes riport gener√°l√°sa"""
    if not st.session_state.demo_results:
        st.warning("Nincs adat a riport gener√°l√°s√°hoz!")
        return
    
    # Riport tartalom l√©trehoz√°sa
    report_lines = []
    report_lines.append("=" * 80)
    report_lines.append("AI EXCEL LEARNING - R√âSZLETES √ñSSZEFOGLAL√ì JELENT√âS")
    report_lines.append("=" * 80)
    report_lines.append(f"Gener√°lva: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report_lines.append(f"WebApp verzi√≥: Enhanced Demo v1.0")
    report_lines.append("")
    
    # √ñsszes√≠t√©s
    total_demos = len(st.session_state.demo_results)
    successful_demos = sum(1 for r in st.session_state.demo_results.values() if r.get("success", False))
    failed_demos = total_demos - successful_demos
    
    if total_demos > 0:
        avg_score = sum(r.get("score", 0) for r in st.session_state.demo_results.values()) / total_demos
        success_rate = successful_demos / total_demos * 100
    else:
        avg_score = 0
        success_rate = 0
    
    report_lines.append("√ñSSZES√çT≈ê STATISZTIK√ÅK:")
    report_lines.append("-" * 40)
    report_lines.append(f"  √ñsszes tanp√©lda futtat√°s: {total_demos}")
    report_lines.append(f"  Sikeres futtat√°sok: {successful_demos}")
    report_lines.append(f"  Sikertelen futtat√°sok: {failed_demos}")
    report_lines.append(f"  Sikeress√©gi ar√°ny: {success_rate:.1f}%")
    report_lines.append(f"  √Åtlagos pontsz√°m: {avg_score:.1f}%")
    report_lines.append("")
    
    # R√©szletes eredm√©nyek
    report_lines.append("R√âSZLETES EREDM√âNYEK:")
    report_lines.append("-" * 40)
    
    for result_key, result in st.session_state.demo_results.items():
        report_lines.append(f"Futtat√°s ID: {result_key}")
        report_lines.append(f"  Kateg√≥ria: {result.get('category_display', result.get('category'))}")
        report_lines.append(f"  D√°tum: {result.get('timestamp')}")
        report_lines.append(f"  Id≈ëtartam: {result.get('duration')}")
        report_lines.append(f"  √Ållapot: {'Sikeres' if result.get('success') else 'Sikertelen'}")
        report_lines.append(f"  Pontsz√°m: {result.get('score', 0)}%")
        report_lines.append("")
    
    report_lines.append("=" * 80)
    report_lines.append("Riport v√©ge")
    
    report_text = "\n".join(report_lines)
    
    # Download gomb
    st.download_button(
        label="üíæ Riport Let√∂lt√©se",
        data=report_text,
        file_name=f"ai_excel_learning_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        mime="text/plain"
    )
    
    st.success("Riport gener√°lva! Kattints a let√∂lt√©s gombra.")

def show_performance_report():
    """Teljes√≠tm√©ny riport megjelen√≠t√©se"""
    st.subheader("üìä Teljes√≠tm√©ny Riport")
    
    report_content = f"""
**Gener√°lva:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

**Rendszer Inform√°ci√≥k:**
- AI modulok: {'El√©rhet≈ë' if check_ai_modules() else 'Nem el√©rhet≈ë'}
- Dashboard: {'Fut' if check_dashboard_status() else 'Nem fut'}
- WebApp: ‚úÖ Fut (localhost:8502)

**Teljes√≠tm√©ny Statisztik√°k:**
"""
    
    if st.session_state.demo_results:
        total_runs = len(st.session_state.demo_results)
        successful_runs = sum(1 for r in st.session_state.demo_results.values() if r.get("success", False))
        success_rate = (successful_runs / total_runs * 100) if total_runs > 0 else 0
        
        # Id≈ëstatisztik√°k
        times = []
        for r in st.session_state.demo_results.values():
            try:
                time_str = r.get("duration", "0s").replace("s", "")
                times.append(float(time_str))
            except ValueError:
                pass
        
        avg_time = sum(times) / len(times) if times else 0
        min_time = min(times) if times else 0
        max_time = max(times) if times else 0
        
        report_content += f"""
- √ñsszes futtat√°s: {total_runs}
- Sikeress√©g: {success_rate:.1f}%
- √Åtlagos id≈ë: {avg_time:.2f}s
- Leggyorsabb: {min_time:.2f}s
- Leglassabb: {max_time:.2f}s
"""
    else:
        report_content += "\n- Nincsenek el√©rhet≈ë adatok"
    
    st.markdown(report_content)

def show_settings_page():
    """Be√°ll√≠t√°sok oldal megjelen√≠t√©se"""
    st.header("‚öôÔ∏è Be√°ll√≠t√°sok")
    st.markdown("---")
    
    # √Åltal√°nos be√°ll√≠t√°sok
    st.subheader("üîß √Åltal√°nos Be√°ll√≠t√°sok")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**M≈±k√∂d√©si Be√°ll√≠t√°sok:**")
        
        auto_refresh = st.checkbox("üîÑ Automatikus friss√≠t√©s", 
                                 value=st.session_state.settings["auto_refresh"])
        
        real_time = st.checkbox("‚è±Ô∏è Val√≥s idej≈± monitoring", 
                               value=st.session_state.settings["real_time_monitoring"])
        
        detailed_logging = st.checkbox("üìù R√©szletes napl√≥z√°s", 
                                      value=st.session_state.settings["detailed_logging"])
        
        # Be√°ll√≠t√°sok ment√©se
        st.session_state.settings.update({
            "auto_refresh": auto_refresh,
            "real_time_monitoring": real_time,
            "detailed_logging": detailed_logging
        })
    
    with col2:
        st.markdown("**Export Be√°ll√≠t√°sok:**")
        
        export_format = st.selectbox("Alap√©rtelmezett export form√°tum:",
                                   ["json", "txt", "csv"],
                                   index=["json", "txt", "csv"].index(st.session_state.settings["export_format"]))
        
        st.session_state.settings["export_format"] = export_format
        
        if st.button("üíæ Be√°ll√≠t√°sok ment√©se", type="primary"):
            st.success("Be√°ll√≠t√°sok mentve!")
        
        if st.button("üîÑ Alap√©rtelmezett vissza√°ll√≠t√°sa"):
            st.session_state.settings = {
                "auto_refresh": True,
                "real_time_monitoring": True,
                "detailed_logging": False,
                "export_format": "json"
            }
            st.success("Alap√©rtelmezett be√°ll√≠t√°sok vissza√°ll√≠tva!")
            st.rerun()
    
    # Rendszer inform√°ci√≥k
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Rendszer Inform√°ci√≥k")
    
    col3, col4 = st.columns(2)
    
    with col3:
        st.markdown("**Alkalmaz√°s Verzi√≥k:**")
        st.write("- WebApp: Enhanced Demo v1.0")
        st.write("- Streamlit:", st.__version__)
        st.write("- Python:", sys.version.split()[0])
    
    with col4:
        st.markdown("**Kapcsolat √Ållapotok:**")
        st.write(f"- AI Modulok: {'‚úÖ El√©rhet≈ë' if check_ai_modules() else '‚ùå Nem el√©rhet≈ë'}")
        st.write(f"- AI Dashboard: {'‚úÖ Fut' if check_dashboard_status() else '‚ùå Nem fut'}")
        st.write(f"- Desktop App: {'‚úÖ Akt√≠v' if check_desktop_app_status() else '‚ùå Inakt√≠v'}")
    
    # Adatok kezel√©se
    st.markdown("---")
    st.subheader("üóÇÔ∏è Adatok Kezel√©se")
    
    col5, col6 = st.columns(2)
    
    with col5:
        st.markdown("**Eredm√©nyek:**")
        st.write(f"T√°rolt eredm√©nyek sz√°ma: {len(st.session_state.demo_results)}")
        
        if st.button("üóëÔ∏è √ñsszes eredm√©ny t√∂rl√©se", type="secondary"):
            if st.button("‚ö†Ô∏è Meger≈ës√≠t√©s - MINDEN eredm√©ny t√∂rl≈ëdik!", type="secondary"):
                st.session_state.demo_results.clear()
                st.success("√ñsszes eredm√©ny t√∂r√∂lve!")
                st.rerun()
    
    with col6:
        st.markdown("**Session Adatok:**")
        st.write(f"Session √°llapot m√©rete: {len(str(st.session_state))}")
        
        if st.button("üîÑ Session √∫jraind√≠t√°sa"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.success("Session √∫jraind√≠tva!")
            st.rerun()

# Automatikus friss√≠t√©s logika
if st.session_state.settings.get("auto_refresh", False):
    if 'last_refresh' not in st.session_state:
        st.session_state.last_refresh = time.time()
    
    current_time = time.time()
    refresh_interval = st.session_state.get('refresh_interval', 15)
    
    if current_time - st.session_state.last_refresh > refresh_interval:
        st.session_state.last_refresh = current_time
        st.rerun()

# F≈ë alkalmaz√°s futtat√°sa
if __name__ == "__main__":
    main()