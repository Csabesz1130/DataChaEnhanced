# .github/workflows/ci-cd.yml
name: Signal Analyzer CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  
jobs:
  # Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint bandit safety
        pip install -r requirements.txt || echo "requirements.txt not found"
        
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check --diff .
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
        
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports || echo "mypy completed with warnings"
        
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || echo "bandit completed"
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # Unit Tests
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xvfb pytest-mock pytest-timeout
        pip install numpy scipy matplotlib pandas tkinter-page
        pip install -r requirements.txt || echo "requirements.txt not found"
        
    - name: Create test data directory
      run: |
        mkdir -p test_data
        
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --timeout=300
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-mock
        pip install numpy scipy matplotlib pandas
        pip install -r requirements.txt || echo "requirements.txt not found"
        
    - name: Download test data
      run: |
        mkdir -p test_data
        python -c "
        import numpy as np
        import os
        
        # Create sample ATF file
        data = np.random.normal(0, 1, 1000)
        time = np.linspace(0, 100, 1000)
        
        with open('test_data/sample.atf', 'w') as f:
            f.write('ATF\t1.0\n')
            f.write('8\t2\n')
            f.write('\"Type=Continuous\"\t\"Time (s)\"\t\"Current (pA)\"\n')
            for t, i in zip(time, data):
                f.write(f'{t:.6f}\t{i:.6f}\n')
        print('Sample ATF file created')
        "
        
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --timeout=600 || echo "Integration tests completed"
        
    - name: Test application startup
      run: |
        timeout 30s python run.py --test-mode || echo "Application startup test completed"

  # Build Application
  build:
    runs-on: ${{ matrix.os }}
    needs: [code-quality, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
        pip install -r requirements.txt || echo "requirements.txt not found"
        
    - name: Build application
      run: |
        python build.py
        
    - name: Test built application
      run: |
        # Test that the built executable exists and runs
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ls dist/
          timeout 10s dist/SignalAnalyzer.exe --help || echo "Windows build test completed"
        else
          ls dist/
          timeout 10s dist/SignalAnalyzer --help || echo "Unix build test completed"
        fi
      shell: bash
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: signal-analyzer-${{ matrix.os }}
        path: dist/
        retention-days: 30

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark memory-profiler
        pip install numpy scipy matplotlib pandas
        pip install -r requirements.txt || echo "requirements.txt not found"
        
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json
        
    - name: Memory profiling
      run: |
        python -m memory_profiler tests/test_memory_usage.py || echo "Memory profiling completed"
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          benchmark.json
          *.mprofile

  # Security Scan
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Documentation
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        pip install -r requirements.txt || echo "requirements.txt not found"
        
    - name: Build documentation
      run: |
        cd docs && make html || echo "Documentation build completed"
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # Release (only on tags)
  release:
    runs-on: ubuntu-latest
    needs: [build, performance, security]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release packages
      run: |
        # Create release packages for each OS
        for os in ubuntu-latest windows-latest macos-latest; do
          if [ -d "signal-analyzer-$os" ]; then
            cd "signal-analyzer-$os"
            if [ "$os" = "windows-latest" ]; then
              zip -r "../SignalAnalyzer-${GITHUB_REF_NAME}-windows.zip" .
            elif [ "$os" = "macos-latest" ]; then
              tar -czf "../SignalAnalyzer-${GITHUB_REF_NAME}-macos.tar.gz" .
            else
              tar -czf "../SignalAnalyzer-${GITHUB_REF_NAME}-linux.tar.gz" .
            fi
            cd ..
          fi
        done
        
    - name: Generate release notes
      run: |
        echo "# Signal Analyzer ${GITHUB_REF_NAME}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes" >> RELEASE_NOTES.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Downloads" >> RELEASE_NOTES.md
        echo "- Windows: SignalAnalyzer-${GITHUB_REF_NAME}-windows.zip" >> RELEASE_NOTES.md
        echo "- macOS: SignalAnalyzer-${GITHUB_REF_NAME}-macos.tar.gz" >> RELEASE_NOTES.md
        echo "- Linux: SignalAnalyzer-${GITHUB_REF_NAME}-linux.tar.gz" >> RELEASE_NOTES.md
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          SignalAnalyzer-*.zip
          SignalAnalyzer-*.tar.gz
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ CI/CD Pipeline failed!"
        # Add notification logic (Slack, email, etc.)